{"ast":null,"code":"export default function getDeviceData(data){var profileList=[];data['data'].forEach(function(profile){profileList.push([{type:\"mac\",index:\"Device\",data:function(){try{var destruct=profile['data']['name'].toUpperCase();return destruct?destruct:\"\";}catch(_unused){return\"\";};}()},{type:\"product\",index:\"Product\",data:function(){try{var destruct=profile['data']['product'];return destruct?destruct:\"\";}catch(_unused2){return\"\";}}()},{type:\"user\",index:\"User ID\",data:function(){try{var destruct=profile['data']['ownerUserName'];return destruct?destruct:\"\";}catch(_unused3){return\"\";}}()},{type:\"description\",index:\"Description\",data:function(){try{var destruct=profile['data']['description'];return destruct?destruct:\"\";}catch(_unused4){return\"\";}}()},{type:\"primary\",index:\"Primary Line\",data:function(){try{var destruct=profile['data']['lines']['line'][0]['dirn']['pattern'];return destruct?destruct:\"\";}catch(_unused5){return\"\";}}()},{type:\"mask\",index:\"E164 Mask\",data:function(){try{var destruct=profile['data']['lines']['line'][0]['e164Mask'];return destruct?destruct:\"\";}catch(_unused6){return\"\";}}()},{type:\"location\",index:\"Location\",data:function(){try{var destruct=profile['meta']['hierarchy'];destruct=destruct.split(\"London Drugs.\")[1];return destruct?destruct:\"\";}catch(_unused7){return\"\";}}()}]);});return new Promise(function(resolve,reject){resolve(profileList);reject(\"Unable to retrieve devices.\");});}","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/dataRetrieval/getDeviceData.js"],"names":["getDeviceData","data","profileList","forEach","profile","push","type","index","destruct","toUpperCase","split","Promise","resolve","reject"],"mappings":"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","sourcesContent":["export default function getDeviceData(data) {\r\n  let profileList = [];\r\n\r\n  data['data'].forEach(profile => {\r\n    profileList.push([\r\n      {\r\n        type: \"mac\",\r\n        index: \"Device\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['name'].toUpperCase();\r\n            return destruct ? destruct : \"\";\r\n          }\r\n          catch {return \"\"};\r\n        })()\r\n      },\r\n      {\r\n        type: \"product\",\r\n        index: \"Product\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['product']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"user\",\r\n        index: \"User ID\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['ownerUserName']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"description\",\r\n        index: \"Description\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['description']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"primary\",\r\n        index: \"Primary Line\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['lines']['line'][0]['dirn']['pattern']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"mask\",\r\n        index: \"E164 Mask\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['lines']['line'][0]['e164Mask']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"location\",\r\n        index: \"Location\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['meta']['hierarchy']\r\n            destruct = destruct.split(\"London Drugs.\")[1]\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      }\r\n    ])\r\n  })\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(profileList)\r\n    reject(\"Unable to retrieve devices.\")\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}