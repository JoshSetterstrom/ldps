{"ast":null,"code":"export default function getLineData(data){return data.map(function(profile){return[{type:\"lines\",index:\"Line\",data:profile.data.pattern?profile.data.pattern:\"\"},{index:\"Alerting Name\",data:profile.data.alertingName?profile.data.alertingName:\"\"},{index:\"Description\",data:profile.data.description?profile.data.description:\"\"},{index:\"Device\",data:profile.data.associatedDevices?profile.data.associatedDevices.device[0]:\"\"},{index:\"Forward\",data:function(){try{var destruct=profile['data']['callForwardAll']['destination'];if(destruct===null){var vm=profile['data']['callForwardAll']['forwardToVoiceMail'];return vm?\"Voicemail\":\"None\";}return destruct;}catch(_unused){return\"\";}}()},{index:\"Location\",data:profile.meta.hierarchy?profile.meta.hierarchy.split(\"London Drugs.\")[1]:\"\"}];});};","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/ld/ldps/src/common/api/getLineData.js"],"names":["getLineData","data","map","profile","type","index","pattern","alertingName","description","associatedDevices","device","destruct","vm","meta","hierarchy","split"],"mappings":"AAAA,cAAe,SAASA,CAAAA,WAAT,CAAqBC,IAArB,CAA2B,CACxC,MAAOA,CAAAA,IAAI,CAACC,GAAL,CAAS,SAAAC,OAAO,CAAI,CACzB,MAAO,CACL,CACEC,IAAI,CAAE,OADR,CAEEC,KAAK,CAAE,MAFT,CAGEJ,IAAI,CAAEE,OAAO,CAACF,IAAR,CAAaK,OAAb,CAAuBH,OAAO,CAACF,IAAR,CAAaK,OAApC,CAA8C,EAHtD,CADK,CAML,CACED,KAAK,CAAE,eADT,CAEEJ,IAAI,CAAEE,OAAO,CAACF,IAAR,CAAaM,YAAb,CAA4BJ,OAAO,CAACF,IAAR,CAAaM,YAAzC,CAAwD,EAFhE,CANK,CAUL,CACEF,KAAK,CAAE,aADT,CAEEJ,IAAI,CAAEE,OAAO,CAACF,IAAR,CAAaO,WAAb,CAA2BL,OAAO,CAACF,IAAR,CAAaO,WAAxC,CAAsD,EAF9D,CAVK,CAcL,CACEH,KAAK,CAAE,QADT,CAEEJ,IAAI,CAAEE,OAAO,CAACF,IAAR,CAAaQ,iBAAb,CACAN,OAAO,CAACF,IAAR,CAAaQ,iBAAb,CAA+BC,MAA/B,CAAsC,CAAtC,CADA,CAC2C,EAHnD,CAdK,CAmBL,CACEL,KAAK,CAAE,SADT,CAEEJ,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIU,CAAAA,QAAQ,CAAGR,OAAO,CAAC,MAAD,CAAP,CAAgB,gBAAhB,EAAkC,aAAlC,CAAf,CACA,GAAIQ,QAAQ,GAAK,IAAjB,CAAuB,CACrB,GAAIC,CAAAA,EAAE,CAAGT,OAAO,CAAC,MAAD,CAAP,CAAgB,gBAAhB,EAAkC,oBAAlC,CAAT,CACA,MAAOS,CAAAA,EAAE,CAAG,WAAH,CAAgB,MAAzB,CACD,CACD,MAAOD,CAAAA,QAAP,CACD,CACD,cAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CAVK,EAFR,CAnBK,CAiCL,CACEN,KAAK,CAAE,UADT,CAEEJ,IAAI,CAAEE,OAAO,CAACU,IAAR,CAAaC,SAAb,CACAX,OAAO,CAACU,IAAR,CAAaC,SAAb,CAAuBC,KAAvB,CAA6B,eAA7B,EAA8C,CAA9C,CADA,CACmD,EAH3D,CAjCK,CAAP,CAuCD,CAxCM,CAAP,CAyCD","sourcesContent":["export default function getLineData(data) {\r\n  return data.map(profile => {\r\n    return [\r\n      {\r\n        type: \"lines\",\r\n        index: \"Line\",\r\n        data: profile.data.pattern ? profile.data.pattern : \"\"\r\n      },\r\n      {\r\n        index: \"Alerting Name\",\r\n        data: profile.data.alertingName ? profile.data.alertingName : \"\"\r\n      },\r\n      {\r\n        index: \"Description\",\r\n        data: profile.data.description ? profile.data.description : \"\"\r\n      },\r\n      {\r\n        index: \"Device\",\r\n        data: profile.data.associatedDevices\r\n            ? profile.data.associatedDevices.device[0] : \"\"\r\n      },\r\n      {\r\n        index: \"Forward\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['callForwardAll']['destination']\r\n            if (destruct === null) {\r\n              let vm = profile['data']['callForwardAll']['forwardToVoiceMail']\r\n              return vm ? \"Voicemail\": \"None\"\r\n            }\r\n            return destruct\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Location\",\r\n        data: profile.meta.hierarchy\r\n            ? profile.meta.hierarchy.split(\"London Drugs.\")[1] : \"\"\r\n      }\r\n    ];\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}