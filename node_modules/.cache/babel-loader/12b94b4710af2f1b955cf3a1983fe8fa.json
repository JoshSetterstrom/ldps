{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josh\\\\Desktop\\\\ld\\\\ldreact\\\\src\\\\common\\\\searchList.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport * as style from \"../css/searchList\";\nimport ListDeviceItem from \"./listDeviceItem\";\nimport ListUserItem from \"./listUserItem\";\nimport IndexMenu from \"./indexMenu\";\nimport getDeviceData from \"./getDeviceData\";\nimport getUserData from \"./getUserData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet string = \"\";\nlet searchDevice = getDeviceData;\nlet searchUser = getUserData;\nlet relevantSearch = \"mac\";\nlet filteredDeviceSearch = [];\nlet filteredUserSearch = []; //Removes duplicates and returns a list of devices that include any data value corresponding with user input string.\n\nconst returnSearch = () => {\n  let infoType = [];\n  let unfilteredDeviceSearch = [];\n  let unfilteredUserSearch = [];\n  searchDevice.forEach(profile => {\n    profile.forEach(e => {\n      // if (!e.data) e.data = \"\";\n      if (e.data.toString().toLowerCase().includes(string)) {\n        infoType.push(e.type);\n        unfilteredDeviceSearch.push(profile);\n      }\n    });\n  });\n  filteredDeviceSearch = [...new Set(unfilteredDeviceSearch)];\n  searchUser.forEach(profile => {\n    profile.forEach(e => {\n      if (e.data.toString().toLowerCase().includes(string)) {\n        // infoType.push(e.type);\n        unfilteredUserSearch.push(profile);\n      }\n    });\n  });\n  filteredUserSearch = [...new Set(unfilteredUserSearch)]; //Highlights most relavent searchindex.\n\n  let counts = [];\n  infoType.forEach(e => {\n    counts[e] = (counts[e] || 0) + 1;\n  });\n  relevantSearch = Object.keys(counts)[0];\n  infoType = [];\n};\n\nexport default function SearchList() {\n  _s();\n\n  const [device, setDevice] = useState(searchDevice);\n  const [deviceDisplay, setDeviceDisplay] = useState(true);\n  const [userDisplay, setUserDisplay] = useState(true);\n  const [user, setUser] = useState(searchUser);\n  const [searchTypeLeftStyle, setSearchTypeLeftStyle] = useState(style.searchTypeLeftStyle);\n  const [searchTypeStyle, setSearchTypeStyle] = useState(style.searchTypeStyle);\n\n  const handleInputChange = e => {\n    string = e.target.value;\n    returnSearch();\n    setDevice(filteredDeviceSearch);\n    setUser(filteredUserSearch);\n  };\n\n  const handleSearchTypeChange = e => {\n    if (e.target.textContent === \"Device\" && !e.target.style[\"borderWidth\"]) {\n      setSearchTypeLeftStyle(style.searchTypeLeftStyleHighlight);\n      setSearchTypeStyle(style.searchTypeStyle);\n      return;\n    }\n\n    if (e.target.textContent === \"User\" && !e.target.style[\"borderWidth\"]) {\n      setSearchTypeStyle(style.searchTypeStyleHighlight);\n      setSearchTypeLeftStyle(style.searchTypeLeftStyle);\n      return;\n    }\n\n    if (e.target.style[\"borderWidth\"]) {\n      setSearchTypeLeftStyle(style.searchTypeLeftStyle);\n      setSearchTypeStyle(style.searchTypeStyle);\n      return;\n    }\n  }; //Renders a list with all devices returned to filteredSearch and passed to device state.\n\n\n  const renderPhoneList = () => {\n    if (deviceDisplay) {\n      return device.map((item, i) => /*#__PURE__*/_jsxDEV(ListDeviceItem, {\n        mac: item[0].data,\n        user: item[1].data.toLowerCase(),\n        line: item[2].data,\n        mask: item[3].data,\n        ip: item[4].data,\n        location: item[5].data.toLowerCase()\n      }, `ID${i}D`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this));\n    }\n  };\n\n  const renderUserList = () => {\n    if (userDisplay) {\n      return user.map((item, i) => /*#__PURE__*/_jsxDEV(ListUserItem, {\n        id: item[0].data,\n        name: item[1].data,\n        primary: item[2].data\n      }, `ID${i}U`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        state: \"false\",\n        onClick: e => handleSearchTypeChange(e),\n        style: searchTypeLeftStyle,\n        children: \"Device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        state: \"false\",\n        onClick: e => handleSearchTypeChange(e),\n        style: searchTypeStyle,\n        children: \"User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: style.searchInputStyle,\n        onChange: e => handleInputChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IndexMenu, {\n      relevantSearch: relevantSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style.listContainerStyle,\n      children: [renderPhoneList(), renderUserList()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchList, \"bKu8K6BaNGE9Tit5gJg61qbi+As=\");\n\n_c = SearchList;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchList\");","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/searchList.jsx"],"names":["React","useState","style","ListDeviceItem","ListUserItem","IndexMenu","getDeviceData","getUserData","string","searchDevice","searchUser","relevantSearch","filteredDeviceSearch","filteredUserSearch","returnSearch","infoType","unfilteredDeviceSearch","unfilteredUserSearch","forEach","profile","e","data","toString","toLowerCase","includes","push","type","Set","counts","Object","keys","SearchList","device","setDevice","deviceDisplay","setDeviceDisplay","userDisplay","setUserDisplay","user","setUser","searchTypeLeftStyle","setSearchTypeLeftStyle","searchTypeStyle","setSearchTypeStyle","handleInputChange","target","value","handleSearchTypeChange","textContent","searchTypeLeftStyleHighlight","searchTypeStyleHighlight","renderPhoneList","map","item","i","renderUserList","display","searchInputStyle","listContainerStyle"],"mappings":"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","sourcesContent":["import {React, useState} from 'react';\r\nimport * as style from \"../css/searchList\";\r\nimport ListDeviceItem from \"./listDeviceItem\";\r\nimport ListUserItem from \"./listUserItem\";\r\nimport IndexMenu from \"./indexMenu\";\r\nimport getDeviceData from \"./getDeviceData\";\r\nimport getUserData from \"./getUserData\";\r\n\r\nlet string = \"\";\r\nlet searchDevice = getDeviceData;\r\nlet searchUser = getUserData;\r\nlet relevantSearch = \"mac\";\r\nlet filteredDeviceSearch = [];\r\nlet filteredUserSearch = [];\r\n\r\n//Removes duplicates and returns a list of devices that include any data value corresponding with user input string.\r\nconst returnSearch = () => {\r\n  let infoType = [];\r\n  let unfilteredDeviceSearch = [];\r\n  let unfilteredUserSearch = [];\r\n\r\n  searchDevice.forEach(profile => {\r\n    profile.forEach(e => {\r\n      // if (!e.data) e.data = \"\";\r\n      if (e.data.toString().toLowerCase().includes(string)) {\r\n        infoType.push(e.type);\r\n        unfilteredDeviceSearch.push(profile);\r\n      }\r\n    });\r\n  });\r\n  filteredDeviceSearch = [...new Set(unfilteredDeviceSearch)];\r\n\r\n  searchUser.forEach(profile => {\r\n    profile.forEach(e => {\r\n      if (e.data.toString().toLowerCase().includes(string)) {\r\n        // infoType.push(e.type);\r\n        unfilteredUserSearch.push(profile);\r\n      }\r\n    })\r\n  })\r\n  filteredUserSearch = [...new Set(unfilteredUserSearch)];\r\n\r\n  //Highlights most relavent searchindex.\r\n  let counts = [];\r\n  infoType.forEach(e => {\r\n    counts[e] = (counts[e] || 0) + 1;\r\n  });\r\n  relevantSearch = Object.keys(counts)[0];\r\n  infoType = [];\r\n};\r\n\r\nexport default function SearchList() {\r\n  const [device, setDevice] = useState(searchDevice);\r\n  const [deviceDisplay, setDeviceDisplay] = useState(true)\r\n  const [userDisplay, setUserDisplay] = useState(true)\r\n  const [user, setUser] = useState(searchUser);\r\n  const [searchTypeLeftStyle, setSearchTypeLeftStyle] = useState(style.searchTypeLeftStyle)\r\n  const [searchTypeStyle, setSearchTypeStyle] = useState(style.searchTypeStyle)\r\n  \r\n  const handleInputChange = e => {\r\n    string = e.target.value;\r\n    returnSearch();\r\n    setDevice(filteredDeviceSearch);\r\n    setUser(filteredUserSearch)\r\n  }\r\n\r\n  const handleSearchTypeChange = e => {\r\n    if (e.target.textContent === \"Device\" && !e.target.style[\"borderWidth\"]) {\r\n      setSearchTypeLeftStyle(style.searchTypeLeftStyleHighlight)\r\n      setSearchTypeStyle(style.searchTypeStyle)\r\n      return\r\n    }\r\n\r\n    if (e.target.textContent === \"User\" && !e.target.style[\"borderWidth\"]) {  \r\n      setSearchTypeStyle(style.searchTypeStyleHighlight)\r\n      setSearchTypeLeftStyle(style.searchTypeLeftStyle)\r\n      return\r\n    }\r\n\r\n    if (e.target.style[\"borderWidth\"]) {\r\n      setSearchTypeLeftStyle(style.searchTypeLeftStyle)\r\n      setSearchTypeStyle(style.searchTypeStyle)\r\n      return\r\n    }\r\n  }\r\n\r\n  //Renders a list with all devices returned to filteredSearch and passed to device state.\r\n  const renderPhoneList = () => {\r\n    if (deviceDisplay) {\r\n      return device.map((item, i) => (\r\n        <ListDeviceItem \r\n          key={`ID${i}D`}\r\n          mac={item[0].data}\r\n          user={item[1].data.toLowerCase()}\r\n          line={item[2].data}\r\n          mask={item[3].data}\r\n          ip={item[4].data}\r\n          location={item[5].data.toLowerCase()}\r\n        />\r\n      ));\r\n    }\r\n  };\r\n\r\n  const renderUserList = () => {\r\n    if (userDisplay) {\r\n      return user.map((item, i) => (\r\n        <ListUserItem\r\n          key={`ID${i}U`}\r\n          id={item[0].data}\r\n          name={item[1].data}\r\n          primary={item[2].data}\r\n        />\r\n      ));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{display: \"flex\"}}>\r\n        <div state=\"false\" onClick={e => handleSearchTypeChange(e)} style={searchTypeLeftStyle}>Device</div>\r\n        <div state=\"false\" onClick={e => handleSearchTypeChange(e)} style={searchTypeStyle}>User</div>\r\n        <input style={style.searchInputStyle} onChange={e => handleInputChange(e)}/>\r\n      </div>\r\n      <IndexMenu relevantSearch={relevantSearch}/>\r\n      <div style={style.listContainerStyle}>{renderPhoneList()}{renderUserList()}</div>\r\n    </div>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}