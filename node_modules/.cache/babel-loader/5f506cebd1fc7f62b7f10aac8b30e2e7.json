{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josh\\\\Desktop\\\\ld\\\\ldreact\\\\src\\\\common\\\\profileTotal\\\\profileTotal.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useCallback, useState } from \"react\";\nimport * as style from \"./style/css\";\nimport ProfileTotalItem from \"./profileTotalItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProfileTotalInput(_ref) {\n  _s();\n\n  let {\n    style,\n    totalToRenderNumber,\n    userInputRecord,\n    setUserInputRecord,\n    setTotalToRenderNumber\n  } = _ref;\n  // Event listener to check items/page value on user input // \n  const onKeyPress = useCallback(e => {\n    if (e.key === \"Enter\") setTotalToRenderNumber(userInputRecord);\n  }, [setTotalToRenderNumber, userInputRecord]); // Renders items/page element //\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style.totalInputContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: style.totalTitleOther,\n      children: \"Items/Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: totalToRenderNumber,\n      style: style.totalInput,\n      onChange: e => setUserInputRecord(parseInt(e.target.value)),\n      onKeyPress: onKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style.totalButton,\n      onClick: () => setTotalToRenderNumber(userInputRecord),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: style.totalButtonLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProfileTotalInput, \"Lul42KsYeOfF/ZA3NNc0vJEvm2s=\");\n\n_c = ProfileTotalInput;\n;\nexport default function ProfileTotal(_ref2) {\n  _s2();\n\n  let {\n    totalToRenderNumber,\n    setTotalToRenderNumber,\n    profileDataToRender,\n    listToRender\n  } = _ref2;\n  const [userInputRecord, setUserInputRecord] = useState(\"\"); // Renders each total item //\n  // What's rendered is dependent on the listToRender state //\n\n  const renderTotalItems = () => {\n    return listToRender === null || listToRender === void 0 ? void 0 : listToRender.map(item => /*#__PURE__*/_jsxDEV(ProfileTotalItem, {\n      item: item,\n      style: style,\n      profileDataToRender: profileDataToRender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this));\n  }; // Renders all components of ProfileTotal //\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: style.totalContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: style.totalTitleMain,\n      children: \"Total Count:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), renderTotalItems()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ProfileTotal, \"QH1oC11ArWDPzxjQSlF2N7/vD+w=\");\n\n_c2 = ProfileTotal;\n;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProfileTotalInput\");\n$RefreshReg$(_c2, \"ProfileTotal\");","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/profileTotal/profileTotal.jsx"],"names":["React","useCallback","useState","style","ProfileTotalItem","ProfileTotalInput","totalToRenderNumber","userInputRecord","setUserInputRecord","setTotalToRenderNumber","onKeyPress","e","key","totalInputContainer","totalTitleOther","totalInput","parseInt","target","value","totalButton","totalButtonLine","ProfileTotal","profileDataToRender","listToRender","renderTotalItems","map","item","totalContainer","totalTitleMain"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,QAA5B,QAA2C,OAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,aAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAEA,SAASC,iBAAT,OACyE;AAAA;;AAAA,MAD9C;AAACF,IAAAA,KAAD;AAAQG,IAAAA,mBAAR;AAA6BC,IAAAA,eAA7B;AACCC,IAAAA,kBADD;AACqBC,IAAAA;AADrB,GAC8C;AAEvE;AACA,QAAMC,UAAU,GAAGT,WAAW,CAACU,CAAC,IAAI;AAClC,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuBH,sBAAsB,CAACF,eAAD,CAAtB;AACxB,GAF6B,EAE3B,CAACE,sBAAD,EAAyBF,eAAzB,CAF2B,CAA9B,CAHuE,CAQvE;;AACA,sBACE;AAAK,IAAA,KAAK,EAAEJ,KAAK,CAACU,mBAAlB;AAAA,4BACE;AAAK,MAAA,KAAK,EAAEV,KAAK,CAACW,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACI,MAAA,WAAW,EAAER,mBADjB;AAEI,MAAA,KAAK,EAAEH,KAAK,CAACY,UAFjB;AAGI,MAAA,QAAQ,EAAEJ,CAAC,IAAIH,kBAAkB,CAACQ,QAAQ,CAACL,CAAC,CAACM,MAAF,CAASC,KAAV,CAAT,CAHrC;AAII,MAAA,UAAU,EAAER;AAJhB;AAAA;AAAA;AAAA;AAAA,YAJF,eAWE;AACI,MAAA,KAAK,EAAEP,KAAK,CAACgB,WADjB;AAEI,MAAA,OAAO,EAAE,MAAMV,sBAAsB,CAACF,eAAD,CAFzC;AAAA,6BAGE;AAAK,QAAA,KAAK,EAAEJ,KAAK,CAACiB;AAAlB;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GA9BQf,iB;;KAAAA,iB;AA8BR;AAGD,eAAe,SAASgB,YAAT,QAAwG;AAAA;;AAAA,MAAlF;AAACf,IAAAA,mBAAD;AAAsBG,IAAAA,sBAAtB;AAA8Ca,IAAAA,mBAA9C;AAAmEC,IAAAA;AAAnE,GAAkF;AACrH,QAAM,CAAChB,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,EAAD,CAAtD,CADqH,CAIrH;AACA;;AACA,QAAMsB,gBAAgB,GAAG,MAAM;AAC7B,WAAOD,YAAP,aAAOA,YAAP,uBAAOA,YAAY,CAAEE,GAAd,CAAkBC,IAAI,iBAC3B,QAAC,gBAAD;AACE,MAAA,IAAI,EAAEA,IADR;AAEE,MAAA,KAAK,EAAEvB,KAFT;AAGE,MAAA,mBAAmB,EAAEmB;AAHvB;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AAMD,GAPD,CANqH,CAgBrH;;;AACA,sBACE;AAAK,IAAA,KAAK,EAAEnB,KAAK,CAACwB,cAAlB;AAAA,4BACE;AAAK,MAAA,KAAK,EAAExB,KAAK,CAACyB,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGJ,gBAAgB,EAFnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;IAxBuBH,Y;;MAAAA,Y;AAwBvB","sourcesContent":["import React, {useCallback, useState} from \"react\"\r\nimport * as style from \"./style/css\"\r\nimport ProfileTotalItem from \"./profileTotalItem\"\r\n\r\nfunction ProfileTotalInput({style, totalToRenderNumber, userInputRecord, \r\n                            setUserInputRecord, setTotalToRenderNumber}) {\r\n\r\n  // Event listener to check items/page value on user input // \r\n  const onKeyPress = useCallback(e => {\r\n    if (e.key === \"Enter\") setTotalToRenderNumber(userInputRecord);\r\n  }, [setTotalToRenderNumber, userInputRecord]);\r\n\r\n\r\n  // Renders items/page element //\r\n  return (\r\n    <div style={style.totalInputContainer}>\r\n      <div style={style.totalTitleOther}>Items/Page</div>\r\n\r\n      {/* Renders input element for items/page referencing onKeyPress */}\r\n      <input \r\n          placeholder={totalToRenderNumber} \r\n          style={style.totalInput} \r\n          onChange={e => setUserInputRecord(parseInt(e.target.value))}\r\n          onKeyPress={onKeyPress}/>\r\n\r\n      {/* Renders the enter button for items/page */}\r\n      <div \r\n          style={style.totalButton}\r\n          onClick={() => setTotalToRenderNumber(userInputRecord)}>\r\n        <div style={style.totalButtonLine}></div>  \r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default function ProfileTotal({totalToRenderNumber, setTotalToRenderNumber, profileDataToRender, listToRender}) {\r\n  const [userInputRecord, setUserInputRecord] = useState(\"\");\r\n\r\n\r\n  // Renders each total item //\r\n  // What's rendered is dependent on the listToRender state //\r\n  const renderTotalItems = () => {\r\n    return listToRender?.map(item => (\r\n      <ProfileTotalItem\r\n        item={item}\r\n        style={style}\r\n        profileDataToRender={profileDataToRender}/>\r\n    ));\r\n  };\r\n\r\n\r\n  // Renders all components of ProfileTotal //\r\n  return (\r\n    <div style={style.totalContainer}>\r\n      <div style={style.totalTitleMain}>Total Count:</div>\r\n      {renderTotalItems()}\r\n      {/* {renderItemsPerPage()} */}\r\n    </div>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}