{"ast":null,"code":"export default function getDeviceData(data) {\n  console.log(data);\n  return data.map(profile => {\n    return {\n      type: 'phones',\n      index: 'Device',\n      data: profile['data']['name'] ? profile['data']['name'].toUpperCase() : \"\"\n    }, {\n      type: \"product\",\n      index: \"Product\",\n      data: profile['data']['product'] ? profile['data']['product'] : \"\"\n    }, {\n      type: \"user\",\n      index: \"User ID\",\n      data: profile['data']['ownerUserName'] ? profile['data']['ownerUserName'] : \"\"\n    }, {\n      type: \"description\",\n      index: \"Description\",\n      data: profile['data']['description'] ? profile['data']['description'] : \"\"\n    }, {\n      type: \"primary\",\n      index: \"Primary Line\",\n      data: profile['data']['lines']['line'][0]['dirn']['pattern'] ? profile['data']['lines']['line'][0]['dirn']['pattern'] : \"\"\n    }, {\n      type: \"mask\",\n      index: \"E164 Mask\",\n      data: profile['data']['lines']['line'][0]['e164Mask'] ? profile['data']['lines']['line'][0]['e164Mask'] : \"\"\n    }, {\n      type: \"location\",\n      index: \"Location\",\n      data: profile['meta']['hierarchy'] ? profile['meta']['hierarchy'].split(\"London Drugs.\")[1] : \"\"\n    };\n  }); // data.forEach(profile => {\n  //   profileList.push([\n  //     {\n  //       type: \"phones\",\n  //       index: \"Device\",\n  //       data: (() => {\n  //         try {\n  //           let destruct = profile['data']['name'].toUpperCase();\n  //           return destruct ? destruct : \"\";\n  //         }\n  //         catch {return \"\"};\n  //       })()\n  //     },\n  //     {\n  //       type: \"product\",\n  //       index: \"Product\",\n  //       data: (() => {\n  //         try {\n  //           let destruct = profile['data']['product']\n  //           return destruct ? destruct : \"\"\n  //         }\n  //         catch {return \"\"}\n  //       })()\n  //     },\n  //     {\n  //       type: \"user\",\n  //       index: \"User ID\",\n  //       data: (() => {\n  //         try {\n  //           let destruct = profile['data']['ownerUserName']\n  //           return destruct ? destruct : \"\"\n  //         }\n  //         catch {return \"\"}\n  //       })()\n  //     },\n  //     {\n  //       type: \"description\",\n  //       index: \"Description\",\n  //       data: (() => {\n  //         try {\n  //           let destruct = profile['data']['description']\n  //           return destruct ? destruct : \"\"\n  //         }\n  //         catch {return \"\"}\n  //       })()\n  //     },\n  //     {\n  //       type: \"primary\",\n  //       index: \"Primary Line\",\n  //       data: (() => {\n  //         try {\n  //           let destruct = profile['data']['lines']['line'][0]['dirn']['pattern']\n  //           return destruct ? destruct : \"\"\n  //         }\n  //         catch {return \"\"}\n  //       })()\n  //     },\n  //     {\n  //       type: \"mask\",\n  //       index: \"E164 Mask\",\n  //       data: (() => {\n  //         try {\n  //           let destruct = profile['data']['lines']['line'][0]['e164Mask']\n  //           return destruct ? destruct : \"\"\n  //         }\n  //         catch {return \"\"}\n  //       })()\n  //     },\n  //     {\n  //       type: \"location\",\n  //       index: \"Location\",\n  //       data: (() => {\n  //         try {\n  //           let destruct = profile['meta']['hierarchy']\n  //           destruct = destruct.split(\"London Drugs.\")[1]\n  //           return destruct ? destruct : \"\"\n  //         }\n  //         catch {return \"\"}\n  //       })()\n  //     }\n  //   ])\n  // })\n  // return new Promise((resolve, reject) => {\n  //   resolve(profileList)\n  //   reject(\"Unable to retrieve devices.\")\n  // })\n}","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldps/src/common/api/getDeviceData.js"],"names":["getDeviceData","data","console","log","map","profile","type","index","toUpperCase","split"],"mappings":"AAAA,eAAe,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,SAAOA,IAAI,CAACG,GAAL,CAASC,OAAO,IAAI;AACzB,WAAO;AACLC,MAAAA,IAAI,EAAE,QADD;AAELC,MAAAA,KAAK,EAAE,QAFF;AAGLN,MAAAA,IAAI,EAAEI,OAAO,CAAC,MAAD,CAAP,CAAgB,MAAhB,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,MAAhB,EAAwBG,WAAxB,EADA,GACwC;AAJzC,OAMP;AACEF,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,KAAK,EAAE,SAFT;AAGEN,MAAAA,IAAI,EAAEI,OAAO,CAAC,MAAD,CAAP,CAAgB,SAAhB,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,SAAhB,CADA,GAC6B;AAJrC,KANO,EAYP;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,KAAK,EAAE,SAFT;AAGEN,MAAAA,IAAI,EAAEI,OAAO,CAAC,MAAD,CAAP,CAAgB,eAAhB,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,eAAhB,CADA,GACmC;AAJ3C,KAZO,EAkBP;AACEC,MAAAA,IAAI,EAAE,aADR;AAEEC,MAAAA,KAAK,EAAE,aAFT;AAGEN,MAAAA,IAAI,EAAEI,OAAO,CAAC,MAAD,CAAP,CAAgB,aAAhB,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,aAAhB,CADA,GACiC;AAJzC,KAlBO,EAwBP;AACEC,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,KAAK,EAAE,cAFT;AAGEN,MAAAA,IAAI,EAAEI,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,EAAyB,MAAzB,EAAiC,CAAjC,EAAoC,MAApC,EAA4C,SAA5C,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,EAAyB,MAAzB,EAAiC,CAAjC,EAAoC,MAApC,EAA4C,SAA5C,CADA,GACyD;AAJjE,KAxBO,EA8BP;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,KAAK,EAAE,WAFT;AAGEN,MAAAA,IAAI,EAAEI,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,EAAyB,MAAzB,EAAiC,CAAjC,EAAoC,UAApC,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,EAAyB,MAAzB,EAAiC,CAAjC,EAAoC,UAApC,CADA,GACkD;AAJ1D,KA9BO,EAoCP;AACEC,MAAAA,IAAI,EAAE,UADR;AAEEC,MAAAA,KAAK,EAAE,UAFT;AAGEN,MAAAA,IAAI,EAAEI,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,EAA6BI,KAA7B,CAAmC,eAAnC,EAAoD,CAApD,CADA,GACyD;AAJjE,KApCA;AA2CD,GA5CM,CAAP,CAH0C,CAmD1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD","sourcesContent":["export default function getDeviceData(data) {\r\n  console.log(data)\r\n\r\n  return data.map(profile => {\r\n    return {\r\n      type: 'phones',\r\n      index: 'Device',\r\n      data: profile['data']['name'] \r\n          ? profile['data']['name'].toUpperCase() : \"\"\r\n    },\r\n    {\r\n      type: \"product\",\r\n      index: \"Product\",\r\n      data: profile['data']['product']\r\n          ? profile['data']['product'] : \"\"\r\n    },\r\n    {\r\n      type: \"user\",\r\n      index: \"User ID\",\r\n      data: profile['data']['ownerUserName']\r\n          ? profile['data']['ownerUserName'] : \"\"\r\n    },\r\n    {\r\n      type: \"description\",\r\n      index: \"Description\",\r\n      data: profile['data']['description']\r\n          ? profile['data']['description'] : \"\"\r\n    },\r\n    {\r\n      type: \"primary\",\r\n      index: \"Primary Line\",\r\n      data: profile['data']['lines']['line'][0]['dirn']['pattern']\r\n          ? profile['data']['lines']['line'][0]['dirn']['pattern'] : \"\"\r\n    },\r\n    {\r\n      type: \"mask\",\r\n      index: \"E164 Mask\",\r\n      data: profile['data']['lines']['line'][0]['e164Mask']\r\n          ? profile['data']['lines']['line'][0]['e164Mask'] : \"\"\r\n    },\r\n    {\r\n      type: \"location\",\r\n      index: \"Location\",\r\n      data: profile['meta']['hierarchy']\r\n          ? profile['meta']['hierarchy'].split(\"London Drugs.\")[1] : \"\"\r\n    }\r\n    \r\n  })\r\n\r\n\r\n\r\n  // data.forEach(profile => {\r\n  //   profileList.push([\r\n  //     {\r\n  //       type: \"phones\",\r\n  //       index: \"Device\",\r\n  //       data: (() => {\r\n  //         try {\r\n  //           let destruct = profile['data']['name'].toUpperCase();\r\n  //           return destruct ? destruct : \"\";\r\n  //         }\r\n  //         catch {return \"\"};\r\n  //       })()\r\n  //     },\r\n  //     {\r\n  //       type: \"product\",\r\n  //       index: \"Product\",\r\n  //       data: (() => {\r\n  //         try {\r\n  //           let destruct = profile['data']['product']\r\n  //           return destruct ? destruct : \"\"\r\n  //         }\r\n  //         catch {return \"\"}\r\n  //       })()\r\n  //     },\r\n  //     {\r\n  //       type: \"user\",\r\n  //       index: \"User ID\",\r\n  //       data: (() => {\r\n  //         try {\r\n  //           let destruct = profile['data']['ownerUserName']\r\n  //           return destruct ? destruct : \"\"\r\n  //         }\r\n  //         catch {return \"\"}\r\n  //       })()\r\n  //     },\r\n  //     {\r\n  //       type: \"description\",\r\n  //       index: \"Description\",\r\n  //       data: (() => {\r\n  //         try {\r\n  //           let destruct = profile['data']['description']\r\n  //           return destruct ? destruct : \"\"\r\n  //         }\r\n  //         catch {return \"\"}\r\n  //       })()\r\n  //     },\r\n  //     {\r\n  //       type: \"primary\",\r\n  //       index: \"Primary Line\",\r\n  //       data: (() => {\r\n  //         try {\r\n  //           let destruct = profile['data']['lines']['line'][0]['dirn']['pattern']\r\n  //           return destruct ? destruct : \"\"\r\n  //         }\r\n  //         catch {return \"\"}\r\n  //       })()\r\n  //     },\r\n  //     {\r\n  //       type: \"mask\",\r\n  //       index: \"E164 Mask\",\r\n  //       data: (() => {\r\n  //         try {\r\n  //           let destruct = profile['data']['lines']['line'][0]['e164Mask']\r\n  //           return destruct ? destruct : \"\"\r\n  //         }\r\n  //         catch {return \"\"}\r\n  //       })()\r\n  //     },\r\n  //     {\r\n  //       type: \"location\",\r\n  //       index: \"Location\",\r\n  //       data: (() => {\r\n  //         try {\r\n  //           let destruct = profile['meta']['hierarchy']\r\n  //           destruct = destruct.split(\"London Drugs.\")[1]\r\n  //           return destruct ? destruct : \"\"\r\n  //         }\r\n  //         catch {return \"\"}\r\n  //       })()\r\n  //     }\r\n  //   ])\r\n  // })\r\n\r\n  // return new Promise((resolve, reject) => {\r\n  //   resolve(profileList)\r\n  //   reject(\"Unable to retrieve devices.\")\r\n  // })\r\n}"]},"metadata":{},"sourceType":"module"}