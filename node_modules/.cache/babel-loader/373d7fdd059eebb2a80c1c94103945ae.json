{"ast":null,"code":"import phones from\"../../data/phone_list\";import lasPhones from\"../../data/las_phones\";var getDeviceData=function getDeviceData(){var i=0;var searchDevice=[];phones['phones'].forEach(function(phone){var container=require(\"../../data/phones/\".concat(phone,\".json\"));var changeName=function changeName(container){return!container?\"\":container;};var changeUser=function changeUser(container){if(!container)return\"\";if(!container.line[0])return\"\";if(!container.line[0].displayAscii)return\"\";return container.line[0].displayAscii;};var changeLine=function changeLine(container){if(!container)return\"\";if(!container.line[0])return\"\";if(!container.line[0].dirn)return\"\";if(!container.line[0].dirn.pattern)return\"\";return container.line[0].dirn.pattern;};var changeMask=function changeMask(container){if(!container)return\"\";if(!container.line[0])return\"\";if(!container.line[0].e164Mask)return\"\";return container.line[0].e164Mask;};searchDevice.push([{key:i,type:\"mac\",data:changeName(container.resources[0].data.name.toUpperCase())},{key:i,type:\"user\",data:changeUser(container.resources[0].data.lines)},{key:i,type:\"primary\",data:changeLine(container.resources[0].data.lines)},{key:i,type:\"mask\",data:changeMask(container.resources[0].data.lines)},{key:i,type:\"ip\",data:changeName(container.resources[0].data.ip_address)},{key:i,type:\"location\",data:container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()}]);});lasPhones['devices'].forEach(function(device){searchDevice.push([{key:i,type:\"mac\",data:device.mac},{key:i,type:\"user\",data:device.user},{key:i,type:\"line\",data:device.line},{key:i,type:\"mask\",data:\"\"},{key:i,type:\"ip\",data:\"\"},{key:i,type:\"location\",data:\"LAS\"}]);});i++;searchDevice.forEach(function(e){if(!e[1].data)e[1].data=\"\";});return searchDevice;};export default getDeviceData();","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/searchList/getDeviceData.js"],"names":["phones","lasPhones","getDeviceData","i","searchDevice","forEach","phone","container","require","changeName","changeUser","line","displayAscii","changeLine","dirn","pattern","changeMask","e164Mask","push","key","type","data","resources","name","toUpperCase","lines","ip_address","meta","hierarchy","split","pop","toLowerCase","device","mac","user","e"],"mappings":"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","sourcesContent":["import phones from \"../../data/phone_list\";\r\nimport lasPhones from \"../../data/las_phones\";\r\n\r\nconst getDeviceData = () => {\r\n  let i = 0;\r\n  let searchDevice = [];\r\n\r\n  phones['phones'].forEach(phone => {\r\n    const container = require(`../../data/phones/${phone}.json`);\r\n    const changeName = container => !container ? \"\" : container\r\n\r\n    const changeUser = (container) => {\r\n      if (!container) return \"\"\r\n      if (!container.line[0]) return \"\"\r\n      if (!container.line[0].displayAscii) return \"\"\r\n      return container.line[0].displayAscii\r\n    }\r\n\r\n    const changeLine = (container) => {\r\n      if (!container) return \"\"\r\n      if (!container.line[0]) return \"\"\r\n      if (!container.line[0].dirn) return \"\"\r\n      if (!container.line[0].dirn.pattern) return \"\"\r\n      return container.line[0].dirn.pattern\r\n    }\r\n\r\n    const changeMask = (container) => {\r\n      if (!container) return \"\"\r\n      if (!container.line[0]) return \"\"\r\n      if (!container.line[0].e164Mask) return \"\"\r\n      return container.line[0].e164Mask\r\n    }\r\n\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: changeName(container.resources[0].data.name.toUpperCase())\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: changeUser(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"primary\",\r\n        data: changeLine(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: changeMask(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: changeName(container.resources[0].data.ip_address)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\r\n      }\r\n    ]);\r\n  });\r\n\r\n  lasPhones['devices'].forEach(device => {\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: device.mac\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: device.user\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: device.line\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: \"LAS\"\r\n      }\r\n    ]);\r\n  });\r\n\r\n  i++;\r\n  searchDevice.forEach(e => {if (!e[1].data) e[1].data = \"\"})\r\n\r\n  return searchDevice;\r\n};\r\n\r\nexport default getDeviceData();"]},"metadata":{},"sourceType":"module"}