{"ast":null,"code":"export default function getVoicemailData(data){var profileList=[];data['data'].forEach(function(profile){profileList.push([{type:\"voicemail\",index:\"Voicemail ID\",data:function(){try{var destruct=profile['profile'].toUpperCase();return destruct?destruct:\"\";}catch(_unused){return\"\";};}()},{index:\"Name\",data:function(){try{var destruct=profile['data']['DisplayName'];return destruct?destruct:\"\";}catch(_unused2){return\"\";}}()},{index:\"Title\",data:function(){try{var destruct=profile['data']['Title'];return destruct?destruct:\"\";}catch(_unused3){return\"\";}}()},{index:\"Extension\",data:function(){try{var destruct=profile['data']['DtmfAccessId'];return destruct?destruct:\"\";}catch(_unused4){return\"\";}}()},{index:\"Location\",data:function(){try{var destruct=profile['meta']['hierarchy'];destruct=destruct.split(\"London Drugs.\")[1];return destruct?destruct:\"\";}catch(_unused5){return\"\";}}()}]);});return new Promise(function(resolve,reject){resolve(profileList);reject(\"Unable to retrieve voicemails.\");});}","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/api/getVoicemailData.js"],"names":["getVoicemailData","data","profileList","forEach","profile","push","type","index","destruct","toUpperCase","split","Promise","resolve","reject"],"mappings":"AAAA,cAAe,SAASA,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgC,CAC7C,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CAEAD,IAAI,CAAC,MAAD,CAAJ,CAAaE,OAAb,CAAqB,SAAAC,OAAO,CAAI,CAC9BF,WAAW,CAACG,IAAZ,CAAiB,CACf,CACEC,IAAI,CAAE,WADR,CAEEC,KAAK,CAAE,cAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,SAAD,CAAP,CAAmBK,WAAnB,EAAf,CACA,MAAOD,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,cAAM,CAAC,MAAO,EAAP,CAAU,EAClB,CANK,EAHR,CADe,CAYf,CACED,KAAK,CAAE,MADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,aAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAFR,CAZe,CAsBf,CACED,KAAK,CAAE,OADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAFR,CAtBe,CAgCf,CACED,KAAK,CAAE,WADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,cAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAFR,CAhCe,CA0Cf,CACED,KAAK,CAAE,UADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,CAAf,CACAI,QAAQ,CAAGA,QAAQ,CAACE,KAAT,CAAe,eAAf,EAAgC,CAAhC,CAAX,CACA,MAAOF,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CAPK,EAFR,CA1Ce,CAAjB,EAsDD,CAvDD,EAyDA,MAAO,IAAIG,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCD,OAAO,CAACV,WAAD,CAAP,CACAW,MAAM,CAAC,gCAAD,CAAN,CACD,CAHM,CAAP,CAID","sourcesContent":["export default function getVoicemailData(data) {\r\n  let profileList = [];\r\n\r\n  data['data'].forEach(profile => {\r\n    profileList.push([\r\n      {\r\n        type: \"voicemail\",\r\n        index: \"Voicemail ID\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['profile'].toUpperCase();\r\n            return destruct ? destruct : \"\";\r\n          }\r\n          catch {return \"\"};\r\n        })()\r\n      },\r\n      {\r\n        index: \"Name\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['DisplayName']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Title\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['Title']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Extension\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['DtmfAccessId']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Location\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['meta']['hierarchy']\r\n            destruct = destruct.split(\"London Drugs.\")[1]\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      }\r\n    ])\r\n  })\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(profileList)\r\n    reject(\"Unable to retrieve voicemails.\")\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}