{"ast":null,"code":"export default function getLineData(data){var profileList=[];data['data'].forEach(function(profile){profileList.push([{type:\"extension\",index:\"Line\",data:function(){try{var destruct=profile['data']['pattern'];return destruct?destruct:\"\";}catch(_unused){return\"\";};}()},{index:\"Alerting Name\",data:function(){try{var destruct=profile['data']['alertingName'];return destruct?destruct:\"\";}catch(_unused2){return\"\";}}()},{index:\"Description\",data:function(){try{var destruct=profile['data']['description'];return destruct?destruct:\"\";}catch(_unused3){return\"\";}}()},{index:\"Device\",data:function(){try{var destruct=profile['data']['associatedDevices']['device'][0];return destruct?destruct:\"\";}catch(_unused4){return\"\";}}()},{index:\"Forward\",data:function(){try{var destruct=profile['data']['callForwardAll']['destination'];if(destruct===null){var vm=profile['data']['callForwardAll']['forwardToVoiceMail'];return vm?\"Voicemail\":\"None\";}return destruct;}catch(_unused5){return\"\";}}()},{index:\"Location\",data:function(){try{var destruct=profile['meta']['hierarchy'];destruct=destruct.split(\"London Drugs.\")[1];return destruct?destruct:\"\";}catch(_unused6){return\"\";}}()}]);});return new Promise(function(resolve,reject){resolve(profileList);reject(\"Unable to retrieve lines.\");});}","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/api/getLineData.js"],"names":["getLineData","data","profileList","forEach","profile","push","type","index","destruct","vm","split","Promise","resolve","reject"],"mappings":"AAAA,cAAe,SAASA,CAAAA,WAAT,CAAqBC,IAArB,CAA2B,CACxC,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CAEAD,IAAI,CAAC,MAAD,CAAJ,CAAaE,OAAb,CAAqB,SAAAC,OAAO,CAAI,CAC9BF,WAAW,CAACG,IAAZ,CAAiB,CACf,CACEC,IAAI,CAAE,WADR,CAEEC,KAAK,CAAE,MAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,SAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,cAAM,CAAC,MAAO,EAAP,CAAU,EAClB,CANK,EAHR,CADe,CAYf,CACED,KAAK,CAAE,eADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,cAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAFR,CAZe,CAsBf,CACED,KAAK,CAAE,aADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,aAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAFR,CAtBe,CAgCf,CACED,KAAK,CAAE,QADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,mBAAhB,EAAqC,QAArC,EAA+C,CAA/C,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAFR,CAhCe,CA0Cf,CACED,KAAK,CAAE,SADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,gBAAhB,EAAkC,aAAlC,CAAf,CACA,GAAII,QAAQ,GAAK,IAAjB,CAAuB,CACrB,GAAIC,CAAAA,EAAE,CAAGL,OAAO,CAAC,MAAD,CAAP,CAAgB,gBAAhB,EAAkC,oBAAlC,CAAT,CACA,MAAOK,CAAAA,EAAE,CAAG,WAAH,CAAgB,MAAzB,CACD,CACD,MAAOD,CAAAA,QAAP,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CAVK,EAFR,CA1Ce,CAwDf,CACED,KAAK,CAAE,UADT,CAEEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,CAAf,CACAI,QAAQ,CAAGA,QAAQ,CAACE,KAAT,CAAe,eAAf,EAAgC,CAAhC,CAAX,CACA,MAAOF,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CAPK,EAFR,CAxDe,CAAjB,EAoED,CArED,EAuEA,MAAO,IAAIG,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCD,OAAO,CAACV,WAAD,CAAP,CACAW,MAAM,CAAC,2BAAD,CAAN,CACD,CAHM,CAAP,CAID","sourcesContent":["export default function getLineData(data) {\r\n  let profileList = [];\r\n\r\n  data['data'].forEach(profile => {\r\n    profileList.push([\r\n      {\r\n        type: \"extension\",\r\n        index: \"Line\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['pattern'];\r\n            return destruct ? destruct : \"\";\r\n          }\r\n          catch {return \"\"};\r\n        })()\r\n      },\r\n      {\r\n        index: \"Alerting Name\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['alertingName']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Description\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['description']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Device\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['associatedDevices']['device'][0]\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Forward\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['callForwardAll']['destination']\r\n            if (destruct === null) {\r\n              let vm = profile['data']['callForwardAll']['forwardToVoiceMail']\r\n              return vm ? \"Voicemail\": \"None\"\r\n            }\r\n            return destruct\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Location\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['meta']['hierarchy']\r\n            destruct = destruct.split(\"London Drugs.\")[1]\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      }\r\n    ])\r\n  })\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(profileList)\r\n    reject(\"Unable to retrieve lines.\")\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}