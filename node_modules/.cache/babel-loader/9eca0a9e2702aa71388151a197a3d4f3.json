{"ast":null,"code":"'use strict';\n\nconst dns = require('dns');\n\nconst kerberos = require('../kerberos');\n\nclass MongoAuthProcess {\n  constructor(host, port, serviceName, options) {\n    options = options || {};\n    this.host = host;\n    this.port = port; // Set up service name\n\n    this.serviceName = serviceName || options.gssapiServiceName || 'mongodb'; // Options\n\n    this.canonicalizeHostName = typeof options.gssapiCanonicalizeHostName === 'boolean' ? options.gssapiCanonicalizeHostName : false; // Set up first transition\n\n    this._transition = firstTransition(this); // Number of retries\n\n    this.retries = 10;\n  }\n\n  init(username, password, callback) {\n    const self = this;\n    this.username = username;\n    this.password = password; // Canonicialize host name if needed\n\n    function performGssapiCanonicalizeHostName(canonicalizeHostName, host, callback) {\n      if (!canonicalizeHostName) return callback(); // Attempt to resolve the host name\n\n      dns.resolveCname(host, (err, r) => {\n        if (err) return callback(err); // Get the first resolve host id\n\n        if (Array.isArray(r) && r.length > 0) {\n          self.host = r[0];\n        }\n\n        callback();\n      });\n    } // Canonicialize host name if needed\n\n\n    performGssapiCanonicalizeHostName(this.canonicalizeHostName, this.host, err => {\n      if (err) return callback(err);\n      const initOptions = {};\n\n      if (password != null) {\n        Object.assign(initOptions, {\n          user: username,\n          password\n        });\n      }\n\n      const service = process.platform === 'win32' ? `${this.serviceName}/${this.host}` : `${this.serviceName}@${this.host}`;\n      kerberos.initializeClient(service, initOptions, (err, client) => {\n        if (err) return callback(err, null);\n        self.client = client;\n        callback(null, client);\n      });\n    });\n  }\n\n  transition(payload, callback) {\n    if (this._transition == null) {\n      return callback(new Error('Transition finished'));\n    }\n\n    this._transition(payload, callback);\n  }\n\n}\n\nfunction firstTransition(auth) {\n  return (payload, callback) => {\n    auth.client.step('', (err, response) => {\n      if (err) return callback(err); // Set up the next step\n\n      auth._transition = secondTransition(auth); // Return the payload\n\n      callback(null, response);\n    });\n  };\n}\n\nfunction secondTransition(auth) {\n  return (payload, callback) => {\n    auth.client.step(payload, (err, response) => {\n      if (err && auth.retries === 0) return callback(err); // Attempt to re-establish a context\n\n      if (err) {\n        // Adjust the number of retries\n        auth.retries = auth.retries - 1; // Call same step again\n\n        return auth.transition(payload, callback);\n      } // Set up the next step\n\n\n      auth._transition = thirdTransition(auth); // Return the payload\n\n      callback(null, response || '');\n    });\n  };\n}\n\nfunction thirdTransition(auth) {\n  return (payload, callback) => {\n    // GSS Client Unwrap\n    auth.client.unwrap(payload, (err, response) => {\n      if (err) return callback(err, false); // Wrap the response\n\n      auth.client.wrap(response, {\n        user: auth.username\n      }, (err, wrapped) => {\n        if (err) return callback(err, false); // Set up the next step\n\n        auth._transition = fourthTransition(auth); // Return the payload\n\n        callback(null, wrapped);\n      });\n    });\n  };\n}\n\nfunction fourthTransition(auth) {\n  return (payload, callback) => {\n    // Set the transition to null\n    auth._transition = null; // Callback with valid authentication\n\n    callback(null, true);\n  };\n} // Set the process\n\n\nmodule.exports = {\n  MongoAuthProcess\n};","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/node_modules/kerberos/lib/auth_processes/mongodb.js"],"names":["dns","require","kerberos","MongoAuthProcess","constructor","host","port","serviceName","options","gssapiServiceName","canonicalizeHostName","gssapiCanonicalizeHostName","_transition","firstTransition","retries","init","username","password","callback","self","performGssapiCanonicalizeHostName","resolveCname","err","r","Array","isArray","length","initOptions","Object","assign","user","service","process","platform","initializeClient","client","transition","payload","Error","auth","step","response","secondTransition","thirdTransition","unwrap","wrap","wrapped","fourthTransition","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst dns = require('dns');\nconst kerberos = require('../kerberos');\n\nclass MongoAuthProcess {\n  constructor(host, port, serviceName, options) {\n    options = options || {};\n    this.host = host;\n    this.port = port;\n\n    // Set up service name\n    this.serviceName = serviceName || options.gssapiServiceName || 'mongodb';\n\n    // Options\n    this.canonicalizeHostName =\n      typeof options.gssapiCanonicalizeHostName === 'boolean'\n        ? options.gssapiCanonicalizeHostName\n        : false;\n\n    // Set up first transition\n    this._transition = firstTransition(this);\n\n    // Number of retries\n    this.retries = 10;\n  }\n\n  init(username, password, callback) {\n    const self = this;\n    this.username = username;\n    this.password = password;\n\n    // Canonicialize host name if needed\n    function performGssapiCanonicalizeHostName(canonicalizeHostName, host, callback) {\n      if (!canonicalizeHostName) return callback();\n\n      // Attempt to resolve the host name\n      dns.resolveCname(host, (err, r) => {\n        if (err) return callback(err);\n\n        // Get the first resolve host id\n        if (Array.isArray(r) && r.length > 0) {\n          self.host = r[0];\n        }\n\n        callback();\n      });\n    }\n\n    // Canonicialize host name if needed\n    performGssapiCanonicalizeHostName(this.canonicalizeHostName, this.host, err => {\n      if (err) return callback(err);\n\n      const initOptions = {};\n      if (password != null) {\n        Object.assign(initOptions, { user: username, password });\n      }\n\n      const service =\n        process.platform === 'win32'\n          ? `${this.serviceName}/${this.host}`\n          : `${this.serviceName}@${this.host}`;\n\n      kerberos.initializeClient(service, initOptions, (err, client) => {\n        if (err) return callback(err, null);\n\n        self.client = client;\n        callback(null, client);\n      });\n    });\n  }\n\n  transition(payload, callback) {\n    if (this._transition == null) {\n      return callback(new Error('Transition finished'));\n    }\n\n    this._transition(payload, callback);\n  }\n}\n\nfunction firstTransition(auth) {\n  return (payload, callback) => {\n    auth.client.step('', (err, response) => {\n      if (err) return callback(err);\n\n      // Set up the next step\n      auth._transition = secondTransition(auth);\n\n      // Return the payload\n      callback(null, response);\n    });\n  };\n}\n\nfunction secondTransition(auth) {\n  return (payload, callback) => {\n    auth.client.step(payload, (err, response) => {\n      if (err && auth.retries === 0) return callback(err);\n\n      // Attempt to re-establish a context\n      if (err) {\n        // Adjust the number of retries\n        auth.retries = auth.retries - 1;\n\n        // Call same step again\n        return auth.transition(payload, callback);\n      }\n\n      // Set up the next step\n      auth._transition = thirdTransition(auth);\n\n      // Return the payload\n      callback(null, response || '');\n    });\n  };\n}\n\nfunction thirdTransition(auth) {\n  return (payload, callback) => {\n    // GSS Client Unwrap\n    auth.client.unwrap(payload, (err, response) => {\n      if (err) return callback(err, false);\n\n      // Wrap the response\n      auth.client.wrap(response, { user: auth.username }, (err, wrapped) => {\n        if (err) return callback(err, false);\n\n        // Set up the next step\n        auth._transition = fourthTransition(auth);\n\n        // Return the payload\n        callback(null, wrapped);\n      });\n    });\n  };\n}\n\nfunction fourthTransition(auth) {\n  return (payload, callback) => {\n    // Set the transition to null\n    auth._transition = null;\n\n    // Callback with valid authentication\n    callback(null, true);\n  };\n}\n\n// Set the process\nmodule.exports = {\n  MongoAuthProcess\n};\n"]},"metadata":{},"sourceType":"script"}