{"ast":null,"code":"export default function getLineData(data) {\n  let profileList = [];\n  data.forEach(profile => {\n    profileList.push([{\n      type: \"lines\",\n      index: \"Line\",\n      data: profile['data']['pattern'] ? profile['data']['pattern'] : \"\"\n    }, {\n      index: \"Alerting Name\",\n      data: profile['data']['alertingName'] ? profile['data']['alertingName'] : \"\"\n    }, {\n      index: \"Description\",\n      data: profile['data']['description'] ? profile['data']['description'] : \"\"\n    }, {\n      index: \"Device\",\n      data: profile['data']['associatedDevices'] ? profile['data']['associatedDevices']['device'][0] : \"\"\n    }, {\n      index: \"Forward\",\n      data: (() => {\n        try {\n          let destruct = profile['data']['callForwardAll']['destination'];\n\n          if (destruct === null) {\n            let vm = profile['data']['callForwardAll']['forwardToVoiceMail'];\n            return vm ? \"Voicemail\" : \"None\";\n          }\n\n          return destruct;\n        } catch {\n          return \"\";\n        }\n      })()\n    }, {\n      index: \"Location\",\n      data: profile['meta']['hierarchy'] ? profile['meta']['hierarchy'].split(\"London Drugs.\")[1] : \"\"\n    }]);\n  });\n  return new Promise((resolve, reject) => {\n    resolve(profileList);\n    reject(\"Unable to retrieve lines.\");\n  });\n}","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldps/src/common/api/getLineData.js"],"names":["getLineData","data","profileList","forEach","profile","push","type","index","destruct","vm","split","Promise","resolve","reject"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACxC,MAAIC,WAAW,GAAG,EAAlB;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAaC,OAAO,IAAI;AACtBF,IAAAA,WAAW,CAACG,IAAZ,CAAiB,CACf;AACEC,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,KAAK,EAAE,MAFT;AAGEN,MAAAA,IAAI,EAAEG,OAAO,CAAC,MAAD,CAAP,CAAgB,SAAhB,IAA6BA,OAAO,CAAC,MAAD,CAAP,CAAgB,SAAhB,CAA7B,GAA0D;AAHlE,KADe,EAMf;AACEG,MAAAA,KAAK,EAAE,eADT;AAEEN,MAAAA,IAAI,EAAEG,OAAO,CAAC,MAAD,CAAP,CAAgB,cAAhB,IAAkCA,OAAO,CAAC,MAAD,CAAP,CAAgB,cAAhB,CAAlC,GAAoE;AAF5E,KANe,EAUf;AACEG,MAAAA,KAAK,EAAE,aADT;AAEEN,MAAAA,IAAI,EAAEG,OAAO,CAAC,MAAD,CAAP,CAAgB,aAAhB,IAAiCA,OAAO,CAAC,MAAD,CAAP,CAAgB,aAAhB,CAAjC,GAAkE;AAF1E,KAVe,EAcf;AACEG,MAAAA,KAAK,EAAE,QADT;AAEEN,MAAAA,IAAI,EAAEG,OAAO,CAAC,MAAD,CAAP,CAAgB,mBAAhB,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,mBAAhB,EAAqC,QAArC,EAA+C,CAA/C,CADA,GACoD;AAH5D,KAde,EAmBf;AACEG,MAAAA,KAAK,EAAE,SADT;AAEEN,MAAAA,IAAI,EAAE,CAAC,MAAM;AACX,YAAI;AACF,cAAIO,QAAQ,GAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,gBAAhB,EAAkC,aAAlC,CAAf;;AACA,cAAII,QAAQ,KAAK,IAAjB,EAAuB;AACrB,gBAAIC,EAAE,GAAGL,OAAO,CAAC,MAAD,CAAP,CAAgB,gBAAhB,EAAkC,oBAAlC,CAAT;AACA,mBAAOK,EAAE,GAAG,WAAH,GAAgB,MAAzB;AACD;;AACD,iBAAOD,QAAP;AACD,SAPD,CAQA,MAAM;AAAC,iBAAO,EAAP;AAAU;AAClB,OAVK;AAFR,KAnBe,EAiCf;AACED,MAAAA,KAAK,EAAE,UADT;AAEEN,MAAAA,IAAI,EAAEG,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,IACAA,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,EAA6BM,KAA7B,CAAmC,eAAnC,EAAoD,CAApD,CADA,GACyD;AAHjE,KAjCe,CAAjB;AAuCD,GAxCD;AA0CA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCD,IAAAA,OAAO,CAACV,WAAD,CAAP;AACAW,IAAAA,MAAM,CAAC,2BAAD,CAAN;AACD,GAHM,CAAP;AAID","sourcesContent":["export default function getLineData(data) {\r\n  let profileList = [];\r\n\r\n  data.forEach(profile => {\r\n    profileList.push([\r\n      {\r\n        type: \"lines\",\r\n        index: \"Line\",\r\n        data: profile['data']['pattern'] ? profile['data']['pattern'] : \"\"\r\n      },\r\n      {\r\n        index: \"Alerting Name\",\r\n        data: profile['data']['alertingName'] ? profile['data']['alertingName'] : \"\"\r\n      },\r\n      {\r\n        index: \"Description\",\r\n        data: profile['data']['description'] ? profile['data']['description'] : \"\"\r\n      },\r\n      {\r\n        index: \"Device\",\r\n        data: profile['data']['associatedDevices']\r\n            ? profile['data']['associatedDevices']['device'][0] : \"\"\r\n      },\r\n      {\r\n        index: \"Forward\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['callForwardAll']['destination']\r\n            if (destruct === null) {\r\n              let vm = profile['data']['callForwardAll']['forwardToVoiceMail']\r\n              return vm ? \"Voicemail\": \"None\"\r\n            }\r\n            return destruct\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Location\",\r\n        data: profile['meta']['hierarchy']\r\n            ? profile['meta']['hierarchy'].split(\"London Drugs.\")[1] : \"\"\r\n      }\r\n    ])\r\n  })\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(profileList)\r\n    reject(\"Unable to retrieve lines.\")\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}