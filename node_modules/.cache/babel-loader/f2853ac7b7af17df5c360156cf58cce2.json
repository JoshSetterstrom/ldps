{"ast":null,"code":"import axios from 'axios';\nimport getDeviceData from \"./getDeviceData\";\nimport getUserData from \"./getUserData\";\nimport getLineData from \"./getLineData\";\nimport getVoicemailData from \"./getVoicemailData\";\nimport getLasData from './getLasData';\nimport getDidData from './getDidData';\nlet url = ['phones', 'subscribers', 'lines', 'voicemail', 'did', 'las', 'location_hierarchy'];\nexport default async function callApi() {\n  let rawData = {};\n  let cleanData = {};\n  let locationHierarchy = {};\n  return await axios.all(() => {\n    return url.map(x => {\n      return axios.get(`http://localhost:5000/${x}`);\n    });\n  }) // return await axios.all([\n  //   axios.get(`http://localhost:5000/phones`),\n  //   axios.get(`http://localhost:5000/subscribers`),\n  //   axios.get(`http://localhost:5000/lines`),\n  //   axios.get(`http://localhost:5000/voicemail`),\n  //   axios.get(`http://localhost:5000/did`),\n  //   axios.get(`http://localhost:5000/las`),\n  //   axios.get(`http://localhost:5000/location_hierarchy`)\n  // ])\n  .then(axios.spread(function () {\n    for (var _len = arguments.length, res = new Array(_len), _key = 0; _key < _len; _key++) {\n      res[_key] = arguments[_key];\n    }\n\n    res.forEach(async data => {\n      let type = data.request.responseURL.split('/').at(-1);\n      rawData[type] = data.data;\n\n      switch (type) {\n        case 'phones':\n          cleanData[type] = getDeviceData(data.data);\n          break;\n\n        case 'subscribers':\n          cleanData[type] = getUserData(data.data);\n          break;\n\n        case 'lines':\n          cleanData[type] = getLineData(data.data);\n          break;\n\n        case 'voicemail':\n          cleanData[type] = getVoicemailData(data.data);\n          break;\n\n        case 'did':\n          cleanData[type] = getDidData(data.data);\n          break;\n\n        case 'las':\n          cleanData[type] = getLasData(data.data);\n          break;\n\n        case 'location_hierarchy':\n          locationHierarchy = data.data;\n          break;\n\n        default:\n          break;\n      }\n    });\n  })).then(() => {\n    return new Promise((resolve, reject) => {\n      resolve({\n        \"rawData\": rawData,\n        \"cleanData\": cleanData,\n        \"locationHierarchy\": locationHierarchy\n      });\n      reject(\"fail\");\n    });\n  });\n}\n;","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldps/src/common/api/callApi.js"],"names":["axios","getDeviceData","getUserData","getLineData","getVoicemailData","getLasData","getDidData","url","callApi","rawData","cleanData","locationHierarchy","all","map","x","get","then","spread","res","forEach","data","type","request","responseURL","split","at","Promise","resolve","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,IAAIC,GAAG,GAAG,CAAC,QAAD,EAAW,aAAX,EAA0B,OAA1B,EAAmC,WAAnC,EAAgD,KAAhD,EAAuD,KAAvD,EAA8D,oBAA9D,CAAV;AAEA,eAAe,eAAeC,OAAf,GAAyB;AACtC,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,iBAAiB,GAAG,EAAxB;AAEA,SAAO,MAAMX,KAAK,CAACY,GAAN,CAAU,MAAM;AAC3B,WAAOL,GAAG,CAACM,GAAJ,CAAQC,CAAC,IAAI;AAClB,aAAOd,KAAK,CAACe,GAAN,CAAW,yBAAwBD,CAAE,EAArC,CAAP;AACD,KAFM,CAAP;AAGD,GAJY,EAMb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAda,GAeZE,IAfY,CAePhB,KAAK,CAACiB,MAAN,CAAa,YAAY;AAAA,sCAARC,GAAQ;AAARA,MAAAA,GAAQ;AAAA;;AAC7BA,IAAAA,GAAG,CAACC,OAAJ,CAAY,MAAMC,IAAN,IAAc;AACxB,UAAIC,IAAI,GAAQD,IAAI,CAACE,OAAL,CAAaC,WAAb,CAAyBC,KAAzB,CAA+B,GAA/B,EAAoCC,EAApC,CAAuC,CAAC,CAAxC,CAAhB;AACAhB,MAAAA,OAAO,CAACY,IAAD,CAAP,GAAgBD,IAAI,CAACA,IAArB;;AAEA,cAAOC,IAAP;AACE,aAAK,QAAL;AAA2BX,UAAAA,SAAS,CAACW,IAAD,CAAT,GAAoBpB,aAAa,CAACmB,IAAI,CAACA,IAAN,CAAjC;AAA8C;;AACzE,aAAK,aAAL;AAA2BV,UAAAA,SAAS,CAACW,IAAD,CAAT,GAAoBnB,WAAW,CAACkB,IAAI,CAACA,IAAN,CAA/B;AAA4C;;AACvE,aAAK,OAAL;AAA2BV,UAAAA,SAAS,CAACW,IAAD,CAAT,GAAoBlB,WAAW,CAACiB,IAAI,CAACA,IAAN,CAA/B;AAA4C;;AACvE,aAAK,WAAL;AAA2BV,UAAAA,SAAS,CAACW,IAAD,CAAT,GAAoBjB,gBAAgB,CAACgB,IAAI,CAACA,IAAN,CAApC;AAAiD;;AAC5E,aAAK,KAAL;AAA2BV,UAAAA,SAAS,CAACW,IAAD,CAAT,GAAoBf,UAAU,CAACc,IAAI,CAACA,IAAN,CAA9B;AAA2C;;AACtE,aAAK,KAAL;AAA2BV,UAAAA,SAAS,CAACW,IAAD,CAAT,GAAoBhB,UAAU,CAACe,IAAI,CAACA,IAAN,CAA9B;AAA2C;;AACtE,aAAK,oBAAL;AAA2BT,UAAAA,iBAAiB,GAAGS,IAAI,CAACA,IAAzB;AAA+B;;AAC1D;AAA2B;AAR7B;AAUD,KAdD;AAeD,GAhBK,CAfO,EAgCZJ,IAhCY,CAgCP,MAAM;AACV,WAAO,IAAIU,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCD,MAAAA,OAAO,CAAC;AACN,mBAAWlB,OADL;AAEN,qBAAaC,SAFP;AAGN,6BAAqBC;AAHf,OAAD,CAAP;AAKAiB,MAAAA,MAAM,CAAC,MAAD,CAAN;AACD,KAPM,CAAP;AAQD,GAzCY,CAAb;AA0CD;AAAA","sourcesContent":["import axios from 'axios';\r\nimport getDeviceData from \"./getDeviceData\";\r\nimport getUserData from \"./getUserData\";\r\nimport getLineData from \"./getLineData\";\r\nimport getVoicemailData from \"./getVoicemailData\";\r\nimport getLasData from './getLasData';\r\nimport getDidData from './getDidData';\r\n\r\nlet url = ['phones', 'subscribers', 'lines', 'voicemail', 'did', 'las', 'location_hierarchy', ]\r\n\r\nexport default async function callApi() {\r\n  let rawData = {};\r\n  let cleanData = {};\r\n  let locationHierarchy = {};\r\n\r\n  return await axios.all(() => {\r\n    return url.map(x => {\r\n      return axios.get(`http://localhost:5000/${x}`)\r\n    })\r\n  })\r\n\r\n  // return await axios.all([\r\n  //   axios.get(`http://localhost:5000/phones`),\r\n  //   axios.get(`http://localhost:5000/subscribers`),\r\n  //   axios.get(`http://localhost:5000/lines`),\r\n  //   axios.get(`http://localhost:5000/voicemail`),\r\n  //   axios.get(`http://localhost:5000/did`),\r\n  //   axios.get(`http://localhost:5000/las`),\r\n  //   axios.get(`http://localhost:5000/location_hierarchy`)\r\n  // ])\r\n  .then(axios.spread((...res) => {\r\n    res.forEach(async data => {\r\n      let type      = data.request.responseURL.split('/').at(-1)\r\n      rawData[type] = data.data\r\n\r\n      switch(type) {\r\n        case 'phones':             cleanData[type]   = getDeviceData(data.data); break\r\n        case 'subscribers':        cleanData[type]   = getUserData(data.data); break\r\n        case 'lines':              cleanData[type]   = getLineData(data.data); break\r\n        case 'voicemail':          cleanData[type]   = getVoicemailData(data.data); break\r\n        case 'did':                cleanData[type]   = getDidData(data.data); break\r\n        case 'las':                cleanData[type]   = getLasData(data.data); break\r\n        case 'location_hierarchy': locationHierarchy = data.data; break\r\n        default:                   break\r\n      }\r\n    });\r\n  }))\r\n  .then(() => {\r\n    return new Promise((resolve, reject) => {\r\n      resolve({\r\n        \"rawData\": rawData,\r\n        \"cleanData\": cleanData, \r\n        \"locationHierarchy\": locationHierarchy\r\n      })\r\n      reject(\"fail\")\r\n    });\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}