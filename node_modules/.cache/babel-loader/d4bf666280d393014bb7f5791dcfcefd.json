{"ast":null,"code":"import { React, useState, useEffect, useRef } from 'react';\nimport * as __data from \"./searchListData\";\nimport * as style from \"../../css/light/searchList\";\nimport * as focusStyle from \"../../css/light/focusedList\"; // import getPageIndexCase from \"./getPageIndexCase\";\n\nimport History from './history';\nimport AssociatedItem from './associatedItem';\nimport renderIndexMenu from './renderIndexMenu';\nimport getItem from './getItem';\nimport getTotalCount from './getTotalCount';\nimport renderList from './renderList';\nimport getDeviceData from \"./getDeviceData\";\nimport getUserData from \"./getUserData\";\nimport getDidData from \"./getDidData\";\nimport getSearch from './getSearch';\nimport getFilteredSearch from './getFilteredSearch'; // import * as pageStyle from \"../../css/light/pageIndex\";\n// import getOverallTotal from './getOverallTotal';\n\nimport PageIndex from \"./pageIndex\";\nimport handleSearchTypeChange from \"./handleSearchTypeChange\";\nlet filteredSearch = {\n  \"device\": {\n    \"results\": getDeviceData,\n    \"relevant\": \"mac\"\n  },\n  \"user\": {\n    \"results\": getUserData,\n    \"relevant\": \"id\"\n  },\n  \"did\": {\n    \"results\": getDidData,\n    \"relevant\": \"did\"\n  }\n};\nlet testFocused = [];\nexport default class SearchList extends Main {//   const [data, setData] = useState(__data['default'])\n  //   const [item, setItem] = useState(getItem(filteredSearch))\n  //   const [pageIndex, setPageIndex] = useState(\"\")\n  //   const [focused, setFocused] = useState([])\n  //   const [pageNumber, setPageNumber] = useState(1)\n  //   const [tempItem, setTempItem] = useState(\"\")\n  //   const firstNum = useRef(null);\n  //   const lastNum = useRef(null);\n  //   const leftTab = useRef(null);\n  //   const rightTab = useRef(null);\n  //   const newPage = useRef(null);\n  //   const [currentPage, setCurrentPage] = useState(firstNum)\n  //   useEffect(() => {\n  //     //use dynamic refs for page index\n  //     setData(getTotalCount(filteredSearch, data))\n  //     // setCurrentPage(temp)\n  //     // setPageIndex(temp)\n  //   }, [data, currentPage])\n  //   const handleInputChange = string => {\n  //     let search = getSearch(getDeviceData, getUserData, getDidData, string, filteredSearch)\n  //     filteredSearch = getFilteredSearch(search)\n  //     setItem(getItem(filteredSearch))\n  //     setData(getTotalCount(filteredSearch, data))\n  //     // setPageIndex(PageIndex(data))\n  //   }\n  //   const getSearchTypeChange = (e, type) => {\n  //     console.log(new PageIndex(data))\n  //     let results = handleSearchTypeChange(e, data, type)\n  //     setData({...results})\n  //   }\n  //   const handleFocus = (e, type, id, assoc) => {\n  //     if (e.target.style.cursor !== \"pointer\") return\n  //     for (let i in focused) if (e.target.innerHTML === focused[i][0].resources[0].data[id]) return\n  //     testFocused = [[require(`../../data/${type}/${e.nativeEvent.path[1].innerText.split('\\n')[0]}.json`), id, type, assoc], ...testFocused]\n  //     setFocused(testFocused) \n  //   }\n  //   const handleFocusChange = (item) => {\n  //     let temp = testFocused\n  //     temp.splice(temp.indexOf(item), 1)\n  //     setFocused(temp)\n  //   }\n  //   //Working here, trying to change color of page number when clicking.\n  //   // const updatePageIndex = (page) => {\n  //     // console.log(currentPage)\n  //     // page.style.color = \"white\"\n  //     // currentPage.current.style.color = \"black\"\n  //     // setCurrentPage(() => {currentPage.style.color = \"black\"; return currentPage})\n  //   // }\n  //   const renderFocusedList = () => {\n  //     let margin = focused.length === 1 ? \"0px 0px 0px 0px\" : \"0px 0px 5px 0px\"\n  //     let focusedItemDD = {...focusStyle.focusedItemDD, margin}\n  //     return focused.map((item, i) => (\n  //       <div key={i}>\n  //         <div style={focusStyle.focusedItemTitleContainer} key={`F${i}`}>\n  //           <div style={{width: \"25%\"}}></div>  \n  //           <div style={focusStyle.focusedItemTitle}>{item[0].resources[0].data[item[1]]}</div>\n  //           <div onClick={() => {setTempItem(item); handleFocusChange(item)}} style={focusStyle.focusClose}>+</div>\n  //         </div>\n  //         <div style={focusedItemDD}>\n  //           <AssociatedItem profile={item} title={item[3]}/>\n  //           <History profile={[item[0].resources[0].data[item[1]], item[2]]}/>\n  //         </div>\n  //       </div>\n  //     ))\n  //   }\n  //   return (\n  //     <div>\n  //       <div style={{maxWidth: \"63.5vw\"}}>\n  //         <div style={{display: \"flex\", marginBottom: \"5px\"}}>\n  //           <div onClick={e => getSearchTypeChange(e, \"device\")} style={style[data['display']['style']['device']]}>Device</div>\n  //           <div onClick={e => getSearchTypeChange(e, \"user\")} style={style[data['display']['style']['user']]}>User</div>\n  //           <div onClick={e => getSearchTypeChange(e, \"line\")} style={style[data['display']['style']['line']]}>Line</div>\n  //           <div onClick={e => getSearchTypeChange(e, \"did\")} style={style[data['display']['style']['did']]}>DID</div>\n  //         </div>\n  //         <input style={style.searchInputStyle} onChange={e => handleInputChange(e)}/>\n  //       </div>\n  //       <div>\n  //         <div style={focusStyle.container}>{renderFocusedList()}</div>\n  //         <div style={style.listContainerStyle}>\n  //           <div>{renderIndexMenu(data['display']['device'], item['device'], filteredSearch['device']['relevant'], data.index.device, data)}</div>\n  //           <div onClick={e => handleFocus(e, \"phones\", \"name\", \"Associated Lines\")}>{renderList(item.device, data['display']['device'], pageNumber, data)}</div>\n  //           <div>{renderIndexMenu(data['display']['user'], item['user'], filteredSearch['user']['relevant'], data.index.user, data)}</div>\n  //           <div onClick={e => handleFocus(e, \"users\", \"userid\", \"Associated Devices\")}>{renderList(item.user, data['display']['user'], pageNumber, data)}</div>\n  //           <div>{renderIndexMenu(data['display']['did'], item['did'], filteredSearch['did']['relevant'], data.index.did, data)}</div>\n  //           <div>{renderList(item.did, data['display']['did'], pageNumber, data)}</div>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   );\n}\n;","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/searchList/searchList.jsx"],"names":["React","useState","useEffect","useRef","__data","style","focusStyle","History","AssociatedItem","renderIndexMenu","getItem","getTotalCount","renderList","getDeviceData","getUserData","getDidData","getSearch","getFilteredSearch","PageIndex","handleSearchTypeChange","filteredSearch","testFocused","SearchList","Main"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,4BAAvB;AACA,OAAO,KAAKC,UAAZ,MAA4B,6BAA5B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B,C,CACA;AACA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AAEA,IAAIC,cAAc,GAAG;AACnB,YAAU;AAAC,eAAWP,aAAZ;AAA2B,gBAAY;AAAvC,GADS;AAEnB,UAAQ;AAAC,eAAWC,WAAZ;AAAyB,gBAAY;AAArC,GAFW;AAGnB,SAAO;AAAC,eAAWC,UAAZ;AAAwB,gBAAY;AAApC;AAHY,CAArB;AAMA,IAAIM,WAAW,GAAG,EAAlB;AAEA,eAAe,MAAMC,UAAN,SAAyBC,IAAzB,CAA8B,CAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnG6C;AAoG5C","sourcesContent":["import {React, useState, useEffect, useRef} from 'react';\r\nimport * as __data from \"./searchListData\"\r\nimport * as style from \"../../css/light/searchList\";\r\nimport * as focusStyle from \"../../css/light/focusedList\";\r\n// import getPageIndexCase from \"./getPageIndexCase\";\r\nimport History from './history';\r\nimport AssociatedItem from './associatedItem';\r\nimport renderIndexMenu from './renderIndexMenu';\r\nimport getItem from './getItem';\r\nimport getTotalCount from './getTotalCount';\r\nimport renderList from './renderList';\r\nimport getDeviceData from \"./getDeviceData\";\r\nimport getUserData from \"./getUserData\";\r\nimport getDidData from \"./getDidData\";\r\nimport getSearch from './getSearch';\r\nimport getFilteredSearch from './getFilteredSearch';\r\n// import * as pageStyle from \"../../css/light/pageIndex\";\r\n// import getOverallTotal from './getOverallTotal';\r\nimport PageIndex from \"./pageIndex\"\r\nimport handleSearchTypeChange from \"./handleSearchTypeChange\";\r\n\r\nlet filteredSearch = {\r\n  \"device\": {\"results\": getDeviceData, \"relevant\": \"mac\"}, \r\n  \"user\": {\"results\": getUserData, \"relevant\": \"id\"},\r\n  \"did\": {\"results\": getDidData, \"relevant\": \"did\"}\r\n}\r\n\r\nlet testFocused = []\r\n\r\nexport default class SearchList extends Main {\r\n//   const [data, setData] = useState(__data['default'])\r\n//   const [item, setItem] = useState(getItem(filteredSearch))\r\n//   const [pageIndex, setPageIndex] = useState(\"\")\r\n//   const [focused, setFocused] = useState([])\r\n//   const [pageNumber, setPageNumber] = useState(1)\r\n//   const [tempItem, setTempItem] = useState(\"\")\r\n//   const firstNum = useRef(null);\r\n//   const lastNum = useRef(null);\r\n//   const leftTab = useRef(null);\r\n//   const rightTab = useRef(null);\r\n//   const newPage = useRef(null);\r\n//   const [currentPage, setCurrentPage] = useState(firstNum)\r\n\r\n//   useEffect(() => {\r\n//     //use dynamic refs for page index\r\n//     setData(getTotalCount(filteredSearch, data))\r\n//     // setCurrentPage(temp)\r\n//     // setPageIndex(temp)\r\n//   }, [data, currentPage])\r\n\r\n//   const handleInputChange = string => {\r\n//     let search = getSearch(getDeviceData, getUserData, getDidData, string, filteredSearch)\r\n//     filteredSearch = getFilteredSearch(search)\r\n//     setItem(getItem(filteredSearch))\r\n//     setData(getTotalCount(filteredSearch, data))\r\n//     // setPageIndex(PageIndex(data))\r\n//   }\r\n\r\n//   const getSearchTypeChange = (e, type) => {\r\n//     console.log(new PageIndex(data))\r\n//     let results = handleSearchTypeChange(e, data, type)\r\n//     setData({...results})\r\n//   }\r\n\r\n//   const handleFocus = (e, type, id, assoc) => {\r\n//     if (e.target.style.cursor !== \"pointer\") return\r\n//     for (let i in focused) if (e.target.innerHTML === focused[i][0].resources[0].data[id]) return\r\n//     testFocused = [[require(`../../data/${type}/${e.nativeEvent.path[1].innerText.split('\\n')[0]}.json`), id, type, assoc], ...testFocused]\r\n//     setFocused(testFocused) \r\n//   }\r\n\r\n//   const handleFocusChange = (item) => {\r\n//     let temp = testFocused\r\n//     temp.splice(temp.indexOf(item), 1)\r\n//     setFocused(temp)\r\n//   }\r\n\r\n//   //Working here, trying to change color of page number when clicking.\r\n\r\n//   // const updatePageIndex = (page) => {\r\n//     // console.log(currentPage)\r\n//     // page.style.color = \"white\"\r\n//     // currentPage.current.style.color = \"black\"\r\n//     // setCurrentPage(() => {currentPage.style.color = \"black\"; return currentPage})\r\n//   // }\r\n\r\n//   const renderFocusedList = () => {\r\n//     let margin = focused.length === 1 ? \"0px 0px 0px 0px\" : \"0px 0px 5px 0px\"\r\n//     let focusedItemDD = {...focusStyle.focusedItemDD, margin}\r\n\r\n//     return focused.map((item, i) => (\r\n//       <div key={i}>\r\n//         <div style={focusStyle.focusedItemTitleContainer} key={`F${i}`}>\r\n//           <div style={{width: \"25%\"}}></div>  \r\n//           <div style={focusStyle.focusedItemTitle}>{item[0].resources[0].data[item[1]]}</div>\r\n//           <div onClick={() => {setTempItem(item); handleFocusChange(item)}} style={focusStyle.focusClose}>+</div>\r\n//         </div>\r\n//         <div style={focusedItemDD}>\r\n//           <AssociatedItem profile={item} title={item[3]}/>\r\n//           <History profile={[item[0].resources[0].data[item[1]], item[2]]}/>\r\n//         </div>\r\n//       </div>\r\n//     ))\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <div style={{maxWidth: \"63.5vw\"}}>\r\n//         <div style={{display: \"flex\", marginBottom: \"5px\"}}>\r\n//           <div onClick={e => getSearchTypeChange(e, \"device\")} style={style[data['display']['style']['device']]}>Device</div>\r\n//           <div onClick={e => getSearchTypeChange(e, \"user\")} style={style[data['display']['style']['user']]}>User</div>\r\n//           <div onClick={e => getSearchTypeChange(e, \"line\")} style={style[data['display']['style']['line']]}>Line</div>\r\n//           <div onClick={e => getSearchTypeChange(e, \"did\")} style={style[data['display']['style']['did']]}>DID</div>\r\n//         </div>\r\n//         <input style={style.searchInputStyle} onChange={e => handleInputChange(e)}/>\r\n//       </div>\r\n//       <div>\r\n//         <div style={focusStyle.container}>{renderFocusedList()}</div>\r\n//         <div style={style.listContainerStyle}>\r\n//           <div>{renderIndexMenu(data['display']['device'], item['device'], filteredSearch['device']['relevant'], data.index.device, data)}</div>\r\n//           <div onClick={e => handleFocus(e, \"phones\", \"name\", \"Associated Lines\")}>{renderList(item.device, data['display']['device'], pageNumber, data)}</div>\r\n//           <div>{renderIndexMenu(data['display']['user'], item['user'], filteredSearch['user']['relevant'], data.index.user, data)}</div>\r\n//           <div onClick={e => handleFocus(e, \"users\", \"userid\", \"Associated Devices\")}>{renderList(item.user, data['display']['user'], pageNumber, data)}</div>\r\n//           <div>{renderIndexMenu(data['display']['did'], item['did'], filteredSearch['did']['relevant'], data.index.did, data)}</div>\r\n//           <div>{renderList(item.did, data['display']['did'], pageNumber, data)}</div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n};"]},"metadata":{},"sourceType":"module"}