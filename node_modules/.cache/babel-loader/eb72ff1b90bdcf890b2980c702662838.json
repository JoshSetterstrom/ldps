{"ast":null,"code":"import _toConsumableArray from\"C:/Users/Josh/Desktop/ld/ldreact/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";var returnSearch=function returnSearch(search,string,relevantSearch){var container=[];var infoType=[];var count=[];search.forEach(function(profile){profile.forEach(function(e){if(e.data.toString().toLowerCase().includes(string)){infoType.push(e.type);container.push(profile);};});});infoType.forEach(function(e){count[e]=(count[e]||0)+1;});relevantSearch=Object.keys(count)[0];infoType=[];return[_toConsumableArray(new Set(container)),relevantSearch];};export default returnSearch;","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/searchList/returnSearch.jsx"],"names":["returnSearch","search","string","relevantSearch","container","infoType","count","forEach","profile","e","data","toString","toLowerCase","includes","push","type","Object","keys","Set"],"mappings":"2HAAA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAASC,MAAT,CAAiBC,cAAjB,CAAoC,CACvD,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CACA,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAEAL,MAAM,CAACM,OAAP,CAAe,SAAAC,OAAO,CAAI,CACxBA,OAAO,CAACD,OAAR,CAAgB,SAAAE,CAAC,CAAI,CACnB,GAAIA,CAAC,CAACC,IAAF,CAAOC,QAAP,GAAkBC,WAAlB,GAAgCC,QAAhC,CAAyCX,MAAzC,CAAJ,CAAsD,CACpDG,QAAQ,CAACS,IAAT,CAAcL,CAAC,CAACM,IAAhB,EACAX,SAAS,CAACU,IAAV,CAAeN,OAAf,EACD,EACF,CALD,EAMD,CAPD,EASAH,QAAQ,CAACE,OAAT,CAAiB,SAAAE,CAAC,CAAI,CACpBH,KAAK,CAACG,CAAD,CAAL,CAAW,CAACH,KAAK,CAACG,CAAD,CAAL,EAAY,CAAb,EAAkB,CAA7B,CACD,CAFD,EAGAN,cAAc,CAAGa,MAAM,CAACC,IAAP,CAAYX,KAAZ,EAAmB,CAAnB,CAAjB,CACAD,QAAQ,CAAG,EAAX,CAEA,MAAO,oBAAK,GAAIa,CAAAA,GAAJ,CAAQd,SAAR,CAAL,EAA0BD,cAA1B,CAAP,CACD,CArBD,CAuBA,cAAeH,CAAAA,YAAf","sourcesContent":["const returnSearch = (search, string, relevantSearch) => {\r\n  let container = [];\r\n  let infoType = [];\r\n  let count = [];\r\n\r\n  search.forEach(profile => {\r\n    profile.forEach(e => {\r\n      if (e.data.toString().toLowerCase().includes(string)) {\r\n        infoType.push(e.type);\r\n        container.push(profile);\r\n      };\r\n    });\r\n  });\r\n  \r\n  infoType.forEach(e => {\r\n    count[e] = (count[e] || 0) + 1;\r\n  });\r\n  relevantSearch = Object.keys(count)[0];\r\n  infoType = [];\r\n\r\n  return [[...new Set(container)], relevantSearch];\r\n}\r\n\r\nexport default returnSearch"]},"metadata":{},"sourceType":"module"}