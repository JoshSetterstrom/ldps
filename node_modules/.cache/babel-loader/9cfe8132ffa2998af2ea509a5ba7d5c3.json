{"ast":null,"code":"import phones from \"../data/phone_list\";\nimport lasPhones from \"../data/las_phones\";\n\nconst getDeviceData = () => {\n  let i = 0;\n  let searchData = [];\n  phones['phones'].forEach(phone => {\n    const container = require(`../data/phones/${phone}.json`);\n\n    if (!container.resources[0].data.lines.line[0].displayAscii) console.log(phone);\n\n    const changeName = container => {\n      if (container === null) {\n        return \"\";\n      } else {\n        return container;\n      }\n    };\n\n    searchData.push([{\n      key: i,\n      type: \"mac\",\n      data: changeName(container.resources[0].data.name.toUpperCase())\n    }, {\n      key: i,\n      type: \"user\",\n      data: changeName(container.resources[0].data.lines.line[0].displayAscii)\n    }, {\n      key: i,\n      type: \"line\",\n      data: changeName(container.resources[0].data.lines.line[0].dirn.pattern)\n    }, {\n      key: i,\n      type: \"mask\",\n      data: changeName(container.resources[0].data.lines.line[0].e164Mask)\n    }, {\n      key: i,\n      type: \"ip\",\n      data: changeName(container.resources[0].data.ip_address)\n    }, {\n      key: i,\n      type: \"location\",\n      data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\n    }]);\n  });\n  lasPhones['devices'].forEach(device => {\n    searchData.push([{\n      key: i,\n      type: \"mac\",\n      data: device.mac\n    }, {\n      key: i,\n      type: \"user\",\n      data: device.user\n    }, {\n      key: i,\n      type: \"line\",\n      data: device.line\n    }, {\n      key: i,\n      type: \"mask\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"ip\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"location\",\n      data: \"LAS\"\n    }]);\n  });\n  i++;\n  searchData.forEach(e => {\n    if (!e[1].data) e[1].data = \"\";\n  });\n  return searchData;\n};\n\nexport default getDeviceData();","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/getDeviceData.js"],"names":["phones","lasPhones","getDeviceData","i","searchData","forEach","phone","container","require","resources","data","lines","line","displayAscii","console","log","changeName","push","key","type","name","toUpperCase","dirn","pattern","e164Mask","ip_address","meta","hierarchy","split","pop","toLowerCase","device","mac","user","e"],"mappings":"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","sourcesContent":["import phones from \"../data/phone_list\";\r\nimport lasPhones from \"../data/las_phones\";\r\n\r\nconst getDeviceData = () => {\r\n  let i = 0;\r\n  let searchData = [];\r\n\r\n  phones['phones'].forEach(phone => {\r\n    \r\n    const container = require(`../data/phones/${phone}.json`);\r\n    \r\n    if (!container.resources[0].data.lines.line[0].displayAscii) console.log(phone)\r\n\r\n    const changeName = (container) => {\r\n      if (container === null) {\r\n        return \"\"\r\n      }\r\n      else {\r\n        return container\r\n      }\r\n    }\r\n\r\n    searchData.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: changeName(container.resources[0].data.name.toUpperCase())\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: changeName(container.resources[0].data.lines.line[0].displayAscii)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: changeName(container.resources[0].data.lines.line[0].dirn.pattern)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: changeName(container.resources[0].data.lines.line[0].e164Mask)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: changeName(container.resources[0].data.ip_address)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\r\n      }\r\n    ]);\r\n  });\r\n\r\n  lasPhones['devices'].forEach(device => {\r\n    searchData.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: device.mac\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: device.user\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: device.line\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: \"LAS\"\r\n      }\r\n    ]);\r\n  });\r\n\r\n  i++;\r\n  searchData.forEach(e => {if (!e[1].data) e[1].data = \"\"})\r\n\r\n  return searchData;\r\n};\r\n\r\nexport default getDeviceData();"]},"metadata":{},"sourceType":"module"}