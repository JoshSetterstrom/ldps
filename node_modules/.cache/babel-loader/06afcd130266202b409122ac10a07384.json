{"ast":null,"code":"import _defineProperty from\"C:/Users/Administrator/Desktop/ld/ldps/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:/Users/Administrator/Desktop/ld/ldps/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/Administrator/Desktop/ld/ldps/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as style from\"./style/profileButtonsStyle\";import{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export default function ProfileButtons(_ref){var listToRender=_ref.listToRender,setListToRender=_ref.setListToRender;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),highlighted=_useState2[0],setHighlighted=_useState2[1];var _useState3=useState(listToRender),_useState4=_slicedToArray(_useState3,1),defaultButtons=_useState4[0];var _useState5=useState(listToRender.map(function(){return style.profileButton;})),_useState6=_slicedToArray(_useState5,2),buttonStyle=_useState6[0],setButtonStyle=_useState6[1];var changeFilter=function changeFilter(item,position){if(highlighted===item.target.innerHTML){setButtonStyle(defaultButtons.map(function(){return style.profileButton;}));setListToRender(defaultButtons);setHighlighted(\"\");return;}else{var newButtonState=defaultButtons.map(function(){return style.profileButton;});newButtonState=_objectSpread(_objectSpread({},newButtonState),{},_defineProperty({},position,style.profileButtonHighlighted));setButtonStyle(newButtonState);setListToRender([item.target.innerHTML]);setHighlighted(item.target.innerHTML);}};return/*#__PURE__*/_jsx(\"div\",{style:style.profileButtonsContainer,children:defaultButtons.map(function(item,i){return/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(e){return changeFilter(e,i);},style:buttonStyle[i],children:item},\"button\".concat(i));})});}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/ld/ldps/src/common/profileButtons/profileButtons.jsx"],"names":["style","useState","ProfileButtons","listToRender","setListToRender","highlighted","setHighlighted","defaultButtons","map","profileButton","buttonStyle","setButtonStyle","changeFilter","item","position","target","innerHTML","newButtonState","profileButtonHighlighted","profileButtonsContainer","i","e"],"mappings":"4WAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,6BAAvB,CACA,OAAQC,QAAR,KAAuB,OAAvB,C,2CAEA,cAAe,SAASC,CAAAA,cAAT,MAAyD,IAAhCC,CAAAA,YAAgC,MAAhCA,YAAgC,CAAlBC,eAAkB,MAAlBA,eAAkB,CACtE,cAAsCH,QAAQ,CAAC,EAAD,CAA9C,wCAAOI,WAAP,eAAoBC,cAApB,eACA,eAAyBL,QAAQ,CAACE,YAAD,CAAjC,yCAAOI,cAAP,eACA,eAAsCN,QAAQ,CAACE,YAAY,CAACK,GAAb,CAAiB,iBAAMR,CAAAA,KAAK,CAACS,aAAZ,EAAjB,CAAD,CAA9C,yCAAOC,WAAP,eAAoBC,cAApB,eAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,IAAD,CAAOC,QAAP,CAAoB,CACvC,GAAIT,WAAW,GAAKQ,IAAI,CAACE,MAAL,CAAYC,SAAhC,CAA2C,CACzCL,cAAc,CAACJ,cAAc,CAACC,GAAf,CAAmB,iBAAMR,CAAAA,KAAK,CAACS,aAAZ,EAAnB,CAAD,CAAd,CACAL,eAAe,CAACG,cAAD,CAAf,CACAD,cAAc,CAAC,EAAD,CAAd,CACA,OACD,CALD,IAOK,CACH,GAAIW,CAAAA,cAAc,CAAGV,cAAc,CAACC,GAAf,CAAmB,iBAAMR,CAAAA,KAAK,CAACS,aAAZ,EAAnB,CAArB,CACAQ,cAAc,gCAAWA,cAAX,wBAA4BH,QAA5B,CAAuCd,KAAK,CAACkB,wBAA7C,EAAd,CACAP,cAAc,CAACM,cAAD,CAAd,CACAb,eAAe,CAAC,CAACS,IAAI,CAACE,MAAL,CAAYC,SAAb,CAAD,CAAf,CACAV,cAAc,CAACO,IAAI,CAACE,MAAL,CAAYC,SAAb,CAAd,CACD,CACF,CAfD,CAiBA,mBACE,YAAK,KAAK,CAAEhB,KAAK,CAACmB,uBAAlB,UACGZ,cAAc,CAACC,GAAf,CAAmB,SAACK,IAAD,CAAOO,CAAP,qBAChB,YACK,OAAO,CAAI,iBAAAC,CAAC,QAAIT,CAAAA,YAAY,CAACS,CAAD,CAAID,CAAJ,CAAhB,EADjB,CAEK,KAAK,CAAMV,WAAW,CAACU,CAAD,CAF3B,UAIGP,IAJH,kBAAyBO,CAAzB,EADgB,EAAnB,CADH,EADF,CAYD","sourcesContent":["import * as style from \"./style/profileButtonsStyle\";\r\nimport {useState} from 'react';\r\n\r\nexport default function ProfileButtons({listToRender, setListToRender}) {\r\n  const [highlighted, setHighlighted] = useState(\"\")\r\n  const [defaultButtons] = useState(listToRender)\r\n  const [buttonStyle, setButtonStyle] = useState(listToRender.map(() => style.profileButton))\r\n\r\n  const changeFilter = (item, position) => {\r\n    if (highlighted === item.target.innerHTML) {\r\n      setButtonStyle(defaultButtons.map(() => style.profileButton))\r\n      setListToRender(defaultButtons)\r\n      setHighlighted(\"\")\r\n      return\r\n    }\r\n\r\n    else {\r\n      let newButtonState = defaultButtons.map(() => style.profileButton)\r\n      newButtonState     = {...newButtonState, [position]: style.profileButtonHighlighted}\r\n      setButtonStyle(newButtonState)\r\n      setListToRender([item.target.innerHTML])\r\n      setHighlighted(item.target.innerHTML)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={style.profileButtonsContainer}>\r\n      {defaultButtons.map((item, i) => (\r\n          <div key     = {`button${i}`} \r\n               onClick = {e => changeFilter(e, i)} \r\n               style   = {buttonStyle[i]}>\r\n            \r\n            {item}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}