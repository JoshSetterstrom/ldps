{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josh\\\\Desktop\\\\ld\\\\ldreact\\\\src\\\\common\\\\searchList\\\\profileButtons.jsx\",\n    _s = $RefreshSig$();\n\nimport * as style from \"../../css/light/searchList\";\nimport createButtonState from \"./createButtonState\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProfileButtons({\n  listToRender,\n  setListToRender\n}) {\n  _s();\n\n  const staticButtons = listToRender; // const [buttonsToRender] = useState(staticButtons)\n\n  const [buttonStyle, setButtonStyle] = useState(createButtonState(staticButtons, style));\n\n  const changeFilter = (item, position) => {\n    buttonStyle[position].border ? setButtonStyle({ ...buttonStyle,\n      [position]: style.searchTypeOther\n    }) : setButtonStyle({ ...buttonStyle,\n      [position]: style.searchTypeOtherHighlight\n    });\n    let temp = listToRender;\n\n    if (listToRender.includes(item.target.innerHTML)) {\n      temp = temp.filter(e => {\n        return e !== item.target.innerHTML;\n      });\n      setListToRender(temp);\n    } else {\n      temp.push(item.target.innerHTML);\n      setListToRender(temp.sort());\n    }\n  };\n\n  const renderButtons = () => {\n    return staticButtons.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: e => changeFilter(e, i),\n      style: buttonStyle[i],\n      children: item\n    }, `B${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      marginBottom: \"5px\"\n    },\n    children: renderButtons()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProfileButtons, \"eC1yQHPGfdrq3SrSk0Ni5haZ6MQ=\");\n\n_c = ProfileButtons;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileButtons\");","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/searchList/profileButtons.jsx"],"names":["style","createButtonState","React","useState","ProfileButtons","listToRender","setListToRender","staticButtons","buttonStyle","setButtonStyle","changeFilter","item","position","border","searchTypeOther","searchTypeOtherHighlight","temp","includes","target","innerHTML","filter","e","push","sort","renderButtons","map","i","display","marginBottom"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;AAEA,eAAe,SAASC,cAAT,CAAwB;AAACC,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAAxB,EAAyD;AAAA;;AACtE,QAAMC,aAAa,GAAGF,YAAtB,CADsE,CAEtE;;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAACF,iBAAiB,CAACM,aAAD,EAAgBP,KAAhB,CAAlB,CAA9C;;AAEA,QAAMU,YAAY,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACvCJ,IAAAA,WAAW,CAACI,QAAD,CAAX,CAAsBC,MAAtB,GACEJ,cAAc,CAAC,EAAC,GAAGD,WAAJ;AAAiB,OAACI,QAAD,GAAYZ,KAAK,CAACc;AAAnC,KAAD,CADhB,GAEEL,cAAc,CAAC,EAAC,GAAGD,WAAJ;AAAiB,OAACI,QAAD,GAAYZ,KAAK,CAACe;AAAnC,KAAD,CAFhB;AAIA,QAAIC,IAAI,GAAGX,YAAX;;AAEA,QAAIA,YAAY,CAACY,QAAb,CAAsBN,IAAI,CAACO,MAAL,CAAYC,SAAlC,CAAJ,EAAkD;AAChDH,MAAAA,IAAI,GAAGA,IAAI,CAACI,MAAL,CAAaC,CAAD,IAAO;AAAC,eAAOA,CAAC,KAAKV,IAAI,CAACO,MAAL,CAAYC,SAAzB;AAAmC,OAAvD,CAAP;AACAb,MAAAA,eAAe,CAACU,IAAD,CAAf;AACD,KAHD,MAIK;AACHA,MAAAA,IAAI,CAACM,IAAL,CAAUX,IAAI,CAACO,MAAL,CAAYC,SAAtB;AACAb,MAAAA,eAAe,CAACU,IAAI,CAACO,IAAL,EAAD,CAAf;AACD;AACF,GAfD;;AAiBA,QAAMC,aAAa,GAAG,MAAM;AAC1B,WAAOjB,aAAa,CAACkB,GAAd,CAAkB,CAACd,IAAD,EAAOe,CAAP,kBACvB;AAAmB,MAAA,OAAO,EAAEL,CAAC,IAAIX,YAAY,CAACW,CAAD,EAAIK,CAAJ,CAA7C;AAAqD,MAAA,KAAK,EAAElB,WAAW,CAACkB,CAAD,CAAvE;AAAA,gBACGf;AADH,OAAW,IAAGe,CAAE,EAAhB;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AAKD,GAND;;AAQA,sBACE;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,YAAY,EAAE;AAAhC,KAAZ;AAAA,cACGJ,aAAa;AADhB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnCuBpB,c;;KAAAA,c","sourcesContent":["import * as style from \"../../css/light/searchList\";\r\nimport createButtonState from \"./createButtonState\";\r\nimport React, {useState} from 'react';\r\n\r\nexport default function ProfileButtons({listToRender, setListToRender}) {\r\n  const staticButtons = listToRender\r\n  // const [buttonsToRender] = useState(staticButtons)\r\n  const [buttonStyle, setButtonStyle] = useState(createButtonState(staticButtons, style))\r\n\r\n  const changeFilter = (item, position) => {\r\n    buttonStyle[position].border \r\n    ? setButtonStyle({...buttonStyle, [position]: style.searchTypeOther})\r\n    : setButtonStyle({...buttonStyle, [position]: style.searchTypeOtherHighlight})\r\n\r\n    let temp = listToRender\r\n\r\n    if (listToRender.includes(item.target.innerHTML)) {\r\n      temp = temp.filter((e) => {return e !== item.target.innerHTML})\r\n      setListToRender(temp)\r\n    }\r\n    else {\r\n      temp.push(item.target.innerHTML)\r\n      setListToRender(temp.sort())\r\n    }\r\n  }\r\n\r\n  const renderButtons = () => {\r\n    return staticButtons.map((item, i) => (\r\n      <div key={`B${i}`} onClick={e => changeFilter(e, i)} style={buttonStyle[i]}>\r\n        {item}\r\n      </div>\r\n    ))\r\n  }\r\n\r\n  return (\r\n    <div style={{display: \"flex\", marginBottom: \"5px\"}}>\r\n      {renderButtons()}\r\n    </div>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}