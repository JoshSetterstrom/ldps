{"ast":null,"code":"import hierarchy from \"../../data/location_hierarchy.json\";\nexport default function getHcsLink(item, type) {\n  let link = \"\";\n  let store = \"\";\n  console.log(item, type);\n\n  try {\n    let file = require(`../../data/${type}/${item}.json`);\n\n    let pkid = file.resources[0].meta.pkid;\n    if (file.resources[0].meta.hierarchy.includes(\"Head Office\")) store = \"head_office\";else store = \"store_\" + file.resources[0].meta.hierarchy.split(\"Store \")[1];\n    link = hierarchy[`link_${type}`];\n    link = link.replace(\"{1}\", hierarchy.stores[store]);\n    link = link.replace(\"{2}\", pkid);\n  } catch {\n    /*catch non-existing device*/\n  }\n\n  return link;\n}","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/dataRetrieval/getHcsLink.js"],"names":["hierarchy","getHcsLink","item","type","link","store","console","log","file","require","pkid","resources","meta","includes","split","replace","stores"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,oCAAtB;AAEA,eAAe,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC7C,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,KAAK,GAAG,EAAZ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkBC,IAAlB;;AAEA,MAAI;AACF,QAAIK,IAAI,GAAGC,OAAO,CAAE,cAAaN,IAAK,IAAGD,IAAK,OAA5B,CAAlB;;AACA,QAAIQ,IAAI,GAAGF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBC,IAAlB,CAAuBF,IAAlC;AAGA,QAAIF,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBC,IAAlB,CAAuBZ,SAAvB,CAAiCa,QAAjC,CAA0C,aAA1C,CAAJ,EAA8DR,KAAK,GAAG,aAAR,CAA9D,KACKA,KAAK,GAAG,WAAWG,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBC,IAAlB,CAAuBZ,SAAvB,CAAiCc,KAAjC,CAAuC,QAAvC,EAAiD,CAAjD,CAAnB;AAELV,IAAAA,IAAI,GAAGJ,SAAS,CAAE,QAAOG,IAAK,EAAd,CAAhB;AACAC,IAAAA,IAAI,GAAGA,IAAI,CAACW,OAAL,CAAa,KAAb,EAAoBf,SAAS,CAACgB,MAAV,CAAiBX,KAAjB,CAApB,CAAP;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACW,OAAL,CAAa,KAAb,EAAoBL,IAApB,CAAP;AACD,GAXD,CAaA,MAAM;AAAC;AAA8B;;AAErC,SAAON,IAAP;AACD","sourcesContent":["import hierarchy from \"../../data/location_hierarchy.json\"\r\n\r\nexport default function getHcsLink(item, type) {\r\n  let link = \"\"\r\n  let store = \"\"\r\n\r\n  console.log(item, type)\r\n\r\n  try {\r\n    let file = require(`../../data/${type}/${item}.json`)\r\n    let pkid = file.resources[0].meta.pkid\r\n\r\n    \r\n    if (file.resources[0].meta.hierarchy.includes(\"Head Office\")) store = \"head_office\"\r\n    else store = \"store_\" + file.resources[0].meta.hierarchy.split(\"Store \")[1]\r\n    \r\n    link = hierarchy[`link_${type}`]\r\n    link = link.replace(\"{1}\", hierarchy.stores[store])\r\n    link = link.replace(\"{2}\", pkid)\r\n  }\r\n\r\n  catch {/*catch non-existing device*/}\r\n\r\n  return link\r\n}"]},"metadata":{},"sourceType":"module"}