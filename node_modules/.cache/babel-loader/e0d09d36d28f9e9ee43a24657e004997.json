{"ast":null,"code":"import phones from \"../../data/phone_list\";\nimport lasPhones from \"../../data/las_phones\";\n\nconst getDeviceData = () => {\n  let i = 0;\n  let searchDevice = [];\n  phones['phones'].forEach(phone => {\n    const container = require(`../../data/phones/${phone}.json`);\n\n    const changeName = container => !container ? \"\" : container;\n\n    console.log(container.resources[0].data.product);\n\n    const changeUser = container => {\n      if (!container) return \"\";\n      if (!container.line[0]) return \"\";\n      if (!container.line[0].displayAscii) return \"\";\n      return container.line[0].displayAscii;\n    };\n\n    const changeLine = container => {\n      if (!container) return \"\";\n      if (!container.line[0]) return \"\";\n      if (!container.line[0].dirn) return \"\";\n      if (!container.line[0].dirn.pattern) return \"\";\n      return container.line[0].dirn.pattern;\n    };\n\n    const changeMask = container => {\n      if (!container) return \"\";\n      if (!container.line[0]) return \"\";\n      if (!container.line[0].e164Mask) return \"\";\n      return container.line[0].e164Mask;\n    };\n\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: changeName(container.resources[0].data.name.toUpperCase())\n    }, {\n      key: i,\n      type: \"user\",\n      data: changeUser(container.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"primary\",\n      data: changeLine(container.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"mask\",\n      data: changeMask(container.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"ip\",\n      data: changeName(container.resources[0].data.ip_address)\n    }, {\n      key: i,\n      type: \"location\",\n      data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\n    }]);\n  });\n  lasPhones['devices'].forEach(device => {\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: device.mac\n    }, {\n      key: i,\n      type: \"user\",\n      data: device.user\n    }, {\n      key: i,\n      type: \"line\",\n      data: device.line\n    }, {\n      key: i,\n      type: \"mask\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"ip\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"location\",\n      data: \"LAS\"\n    }]);\n  });\n  i++;\n  searchDevice.forEach(e => {\n    if (!e[1].data) e[1].data = \"\";\n  });\n  return searchDevice;\n};\n\nexport default getDeviceData();","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/searchList/getDeviceData.js"],"names":["phones","lasPhones","getDeviceData","i","searchDevice","forEach","phone","container","require","changeName","console","log","resources","data","product","changeUser","line","displayAscii","changeLine","dirn","pattern","changeMask","e164Mask","push","key","type","name","toUpperCase","lines","ip_address","meta","hierarchy","split","pop","toLowerCase","device","mac","user","e"],"mappings":"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","sourcesContent":["import phones from \"../../data/phone_list\";\r\nimport lasPhones from \"../../data/las_phones\";\r\n\r\nconst getDeviceData = () => {\r\n  let i = 0;\r\n  let searchDevice = [];\r\n\r\n  phones['phones'].forEach(phone => {\r\n    const container = require(`../../data/phones/${phone}.json`);\r\n    const changeName = container => !container ? \"\" : container\r\n\r\n\r\n    console.log(container.resources[0].data.product)\r\n\r\n    const changeUser = (container) => {\r\n      if (!container) return \"\"\r\n      if (!container.line[0]) return \"\"\r\n      if (!container.line[0].displayAscii) return \"\"\r\n      return container.line[0].displayAscii\r\n    }\r\n\r\n    const changeLine = (container) => {\r\n      if (!container) return \"\"\r\n      if (!container.line[0]) return \"\"\r\n      if (!container.line[0].dirn) return \"\"\r\n      if (!container.line[0].dirn.pattern) return \"\"\r\n      return container.line[0].dirn.pattern\r\n    }\r\n\r\n    const changeMask = (container) => {\r\n      if (!container) return \"\"\r\n      if (!container.line[0]) return \"\"\r\n      if (!container.line[0].e164Mask) return \"\"\r\n      return container.line[0].e164Mask\r\n    }\r\n\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: changeName(container.resources[0].data.name.toUpperCase())\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: changeUser(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"primary\",\r\n        data: changeLine(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: changeMask(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: changeName(container.resources[0].data.ip_address)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\r\n      }\r\n    ]);\r\n  });\r\n\r\n  lasPhones['devices'].forEach(device => {\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: device.mac\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: device.user\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: device.line\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: \"LAS\"\r\n      }\r\n    ]);\r\n  });\r\n\r\n  i++;\r\n  searchDevice.forEach(e => {if (!e[1].data) e[1].data = \"\"})\r\n\r\n  return searchDevice;\r\n};\r\n\r\nexport default getDeviceData();"]},"metadata":{},"sourceType":"module"}