{"ast":null,"code":"export default function getUserData(data){var profileList=[];data['data'].forEach(function(profile){profileList.push([{type:\"id\",index:\"User ID\",data:function(){try{var destruct=profile['data']['userid'];return destruct?destruct:\"\";}catch(_unused){return\"\";}}()},{type:\"display\",index:\"Display\",data:function(){try{var destruct=profile['data']['displayName'];return destruct?destruct:\"\";}catch(_unused2){return\"\";}}()},{type:\"primary\",index:\"Primary Line\",data:function(){try{var destruct=profile['data']['primaryExtension']['pattern'];return destruct?destruct:\"\";}catch(_unused3){return\"\";}}()},{type:\"department\",index:\"Department\",data:function(){try{var destruct=profile['data']['title'];return destruct?destruct:\"\";}catch(_unused4){return\"\";}}()},{type:\"device\",index:\"MAC Address\",data:function(){try{var destruct=profile['data']['Phone'][0]['name'];return destruct?destruct:\"\";}catch(_unused5){return\"\";}}()},{type:\"location\",index:\"Location\",data:function(){try{var destruct=profile['meta']['hierarchy'];destruct=destruct.split(\"London Drugs.\")[1];return destruct?destruct:\"\";}catch(_unused6){return\"\";}}()}]);});return new Promise(function(resolve,reject){resolve(profileList);reject(\"Unable to retrieve users.\");});};","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/dataRetrieval/getUserData.js"],"names":["getUserData","data","profileList","forEach","profile","push","type","index","destruct","split","Promise","resolve","reject"],"mappings":"AAAA,cAAe,SAASA,CAAAA,WAAT,CAAqBC,IAArB,CAA2B,CACxC,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CAEAD,IAAI,CAAC,MAAD,CAAJ,CAAaE,OAAb,CAAqB,SAAAC,OAAO,CAAI,CAC9BF,WAAW,CAACG,IAAZ,CAAiB,CACf,CACEC,IAAI,CAAE,IADR,CAEEC,KAAK,CAAE,SAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,QAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,cAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAHR,CADe,CAYf,CACEF,IAAI,CAAE,SADR,CAEEC,KAAK,CAAE,SAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,aAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAHR,CAZe,CAuBf,CACEF,IAAI,CAAE,SADR,CAEEC,KAAK,CAAE,cAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,kBAAhB,EAAoC,SAApC,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAHR,CAvBe,CAkCf,CACEF,IAAI,CAAE,YADR,CAEEC,KAAK,CAAE,YAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAHR,CAlCe,CA6Cf,CACEF,IAAI,CAAE,QADR,CAEEC,KAAK,CAAE,aAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,EAAyB,CAAzB,EAA4B,MAA5B,CAAf,CACA,MAAOI,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CANK,EAHR,CA7Ce,CAwDf,CACEF,IAAI,CAAE,UADR,CAEEC,KAAK,CAAE,UAFT,CAGEN,IAAI,CAAG,UAAM,CACX,GAAI,CACF,GAAIO,CAAAA,QAAQ,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,CAAf,CACAI,QAAQ,CAAGA,QAAQ,CAACC,KAAT,CAAe,eAAf,EAAgC,CAAhC,CAAX,CACA,MAAOD,CAAAA,QAAQ,CAAGA,QAAH,CAAc,EAA7B,CACD,CACD,eAAM,CAAC,MAAO,EAAP,CAAU,CAClB,CAPK,EAHR,CAxDe,CAAjB,EAqED,CAtED,EAwEA,MAAO,IAAIE,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCD,OAAO,CAACT,WAAD,CAAP,CACAU,MAAM,CAAC,2BAAD,CAAN,CACD,CAHM,CAAP,CAID","sourcesContent":["export default function getUserData(data) {\r\n  let profileList = [];\r\n  \r\n  data['data'].forEach(profile => {\r\n    profileList.push([\r\n      {\r\n        type: \"id\",\r\n        index: \"User ID\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['userid'];\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"display\",\r\n        index: \"Display\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['displayName'];\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"primary\",\r\n        index: \"Primary Line\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['primaryExtension']['pattern'];\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"department\",\r\n        index: \"Department\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['title'];\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"device\",\r\n        index: \"MAC Address\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['data']['Phone'][0]['name'];\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        type: \"location\",\r\n        index: \"Location\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['meta']['hierarchy']\r\n            destruct = destruct.split(\"London Drugs.\")[1]\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      }\r\n    ]);\r\n  });\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(profileList)\r\n    reject(\"Unable to retrieve users.\")\r\n  })\r\n};"]},"metadata":{},"sourceType":"module"}