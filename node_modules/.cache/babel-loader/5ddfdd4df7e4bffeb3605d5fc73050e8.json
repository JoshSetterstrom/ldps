{"ast":null,"code":"import phones from \"../data/phone_list\";\nimport lasPhones from \"../data/las_phones\";\n\nconst getDeviceData = () => {\n  let i = 0;\n  let searchDevice = [];\n  phones['phones'].forEach(phone => {\n    const container = require(`../data/phones/${phone}.json`);\n\n    const changeName = container => !container ? \"\" : container; // const changeItem = container => null ? \"\" : container\n\n\n    const changeUser = () => {\n      try {\n        return container.resources[0].data.lines.line[0].displayAscii;\n      } catch {\n        return \"\";\n      }\n    };\n\n    const changeLine = () => {\n      try {\n        return container.resources[0].data.lines.line[0].dirn.pattern;\n      } catch {\n        return \"\";\n      }\n    };\n\n    const changeMask = () => {\n      try {\n        return container.resources[0].data.lines.line[0].e164Mask;\n      } catch {\n        return \"\";\n      }\n    };\n\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: changeName(container.resources[0].data.name.toUpperCase())\n    }, {\n      key: i,\n      type: \"user\",\n      data: changeUser()\n    }, {\n      key: i,\n      type: \"line\",\n      data: changeLine()\n    }, {\n      key: i,\n      type: \"mask\",\n      data: changeMask()\n    }, {\n      key: i,\n      type: \"ip\",\n      data: changeName(container.resources[0].data.ip_address)\n    }, {\n      key: i,\n      type: \"location\",\n      data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\n    }]);\n  });\n  lasPhones['devices'].forEach(device => {\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: device.mac\n    }, {\n      key: i,\n      type: \"user\",\n      data: device.user\n    }, {\n      key: i,\n      type: \"line\",\n      data: device.line\n    }, {\n      key: i,\n      type: \"mask\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"ip\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"location\",\n      data: \"LAS\"\n    }]);\n  });\n  i++;\n  searchDevice.forEach(e => {\n    if (!e[1].data) e[1].data = \"\";\n  });\n  return searchDevice;\n};\n\nexport default getDeviceData();","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/getDeviceData.js"],"names":["phones","lasPhones","getDeviceData","i","searchDevice","forEach","phone","container","require","changeName","changeUser","resources","data","lines","line","displayAscii","changeLine","dirn","pattern","changeMask","e164Mask","push","key","type","name","toUpperCase","ip_address","meta","hierarchy","split","pop","toLowerCase","device","mac","user","e"],"mappings":"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","sourcesContent":["import phones from \"../data/phone_list\";\r\nimport lasPhones from \"../data/las_phones\";\r\n\r\nconst getDeviceData = () => {\r\n  let i = 0;\r\n  let searchDevice = [];\r\n\r\n  phones['phones'].forEach(phone => {\r\n    const container = require(`../data/phones/${phone}.json`);\r\n    const changeName = container => !container ? \"\" : container\r\n    // const changeItem = container => null ? \"\" : container\r\n\r\n    const changeUser = () => {\r\n      try {\r\n        return container.resources[0].data.lines.line[0].displayAscii\r\n      }\r\n      catch {\r\n        return \"\"\r\n      }\r\n    }\r\n\r\n    const changeLine = () => {\r\n      try {\r\n        return container.resources[0].data.lines.line[0].dirn.pattern\r\n      }\r\n      catch {\r\n        return \"\"\r\n      }\r\n    }\r\n\r\n    const changeMask = () => {\r\n      try {\r\n        return container.resources[0].data.lines.line[0].e164Mask\r\n      }\r\n      catch {\r\n        return \"\"\r\n      }\r\n    }\r\n\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: changeName(container.resources[0].data.name.toUpperCase())\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: changeUser()\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: changeLine()\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: changeMask()\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: changeName(container.resources[0].data.ip_address)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\r\n      }\r\n    ]);\r\n  });\r\n\r\n  lasPhones['devices'].forEach(device => {\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: device.mac\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: device.user\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: device.line\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: \"LAS\"\r\n      }\r\n    ]);\r\n  });\r\n\r\n  i++;\r\n  searchDevice.forEach(e => {if (!e[1].data) e[1].data = \"\"})\r\n\r\n  return searchDevice;\r\n};\r\n\r\nexport default getDeviceData();"]},"metadata":{},"sourceType":"module"}