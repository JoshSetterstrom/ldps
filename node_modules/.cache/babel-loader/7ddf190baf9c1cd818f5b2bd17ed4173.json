{"ast":null,"code":"const returnSearch = (search, string, relevantSearch) => {\n  console.log(search);\n  let container = [];\n  let infoType = [];\n  let count = [];\n  search.forEach(profile => {\n    profile.forEach(e => {\n      if (e.data.toString().toLowerCase().includes(string)) {\n        infoType.push(e.type);\n        container.push(profile);\n      }\n\n      ;\n    });\n  });\n  infoType.forEach(e => {\n    count[e] = (count[e] || 0) + 1;\n  });\n  relevantSearch = Object.keys(count)[0];\n  infoType = [];\n  return [[...new Set(container)], relevantSearch];\n};\n\nexport default returnSearch;","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/searchList/returnSearch.jsx"],"names":["returnSearch","search","string","relevantSearch","console","log","container","infoType","count","forEach","profile","e","data","toString","toLowerCase","includes","push","type","Object","keys","Set"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,cAAjB,KAAoC;AACvDC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,MAAIK,SAAS,GAAG,EAAhB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,KAAK,GAAG,EAAZ;AAEAP,EAAAA,MAAM,CAACQ,OAAP,CAAeC,OAAO,IAAI;AACxBA,IAAAA,OAAO,CAACD,OAAR,CAAgBE,CAAC,IAAI;AACnB,UAAIA,CAAC,CAACC,IAAF,CAAOC,QAAP,GAAkBC,WAAlB,GAAgCC,QAAhC,CAAyCb,MAAzC,CAAJ,EAAsD;AACpDK,QAAAA,QAAQ,CAACS,IAAT,CAAcL,CAAC,CAACM,IAAhB;AACAX,QAAAA,SAAS,CAACU,IAAV,CAAeN,OAAf;AACD;;AAAA;AACF,KALD;AAMD,GAPD;AASAH,EAAAA,QAAQ,CAACE,OAAT,CAAiBE,CAAC,IAAI;AACpBH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAW,CAACH,KAAK,CAACG,CAAD,CAAL,IAAY,CAAb,IAAkB,CAA7B;AACD,GAFD;AAGAR,EAAAA,cAAc,GAAGe,MAAM,CAACC,IAAP,CAAYX,KAAZ,EAAmB,CAAnB,CAAjB;AACAD,EAAAA,QAAQ,GAAG,EAAX;AAEA,SAAO,CAAC,CAAC,GAAG,IAAIa,GAAJ,CAAQd,SAAR,CAAJ,CAAD,EAA0BH,cAA1B,CAAP;AACD,CAtBD;;AAwBA,eAAeH,YAAf","sourcesContent":["const returnSearch = (search, string, relevantSearch) => {\r\n  console.log(search)\r\n  let container = [];\r\n  let infoType = [];\r\n  let count = [];\r\n\r\n  search.forEach(profile => {\r\n    profile.forEach(e => {\r\n      if (e.data.toString().toLowerCase().includes(string)) {\r\n        infoType.push(e.type);\r\n        container.push(profile);\r\n      };\r\n    });\r\n  });\r\n  \r\n  infoType.forEach(e => {\r\n    count[e] = (count[e] || 0) + 1;\r\n  });\r\n  relevantSearch = Object.keys(count)[0];\r\n  infoType = [];\r\n\r\n  return [[...new Set(container)], relevantSearch];\r\n}\r\n\r\nexport default returnSearch"]},"metadata":{},"sourceType":"module"}