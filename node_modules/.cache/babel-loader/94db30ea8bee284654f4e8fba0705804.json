{"ast":null,"code":"export default function getHcsLink(profile,location_hierarchy){var link=\"\";var store=\"\";try{var pkid=profile['meta']['pkid'];var type=\"link_\".concat(profile['type'].slice(0,-1));if(profile['meta']['hierarchy'].includes(\"Head Office\"))store=\"head_office\";if(profile['meta']['hierarchy'].split(\"Store \").length===1)store=\"london_drugs\";else store=\"store_\"+profile['meta']['hierarchy'].split(\"Store \")[1];profile['meta']['hierarchy'].split(\"Store \");link=location_hierarchy[0][type];link=link.replace(\"{1}\",location_hierarchy[1][store]);link=link.replace(\"{2}\",pkid);}catch(_unused){/*catch non-existing device*/}return link;}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/ld/ldps/src/common/api/getHcsLink.js"],"names":["getHcsLink","profile","location_hierarchy","link","store","pkid","type","slice","includes","split","length","replace"],"mappings":"AAAA,cAAe,SAASA,CAAAA,UAAT,CAAoBC,OAApB,CAA6BC,kBAA7B,CAAiD,CAC9D,GAAIC,CAAAA,IAAI,CAAG,EAAX,CACA,GAAIC,CAAAA,KAAK,CAAG,EAAZ,CAEA,GAAI,CACF,GAAIC,CAAAA,IAAI,CAAGJ,OAAO,CAAC,MAAD,CAAP,CAAgB,MAAhB,CAAX,CACA,GAAIK,CAAAA,IAAI,gBAAWL,OAAO,CAAC,MAAD,CAAP,CAAgBM,KAAhB,CAAsB,CAAtB,CAAyB,CAAC,CAA1B,CAAX,CAAR,CAEA,GAAIN,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,EAA6BO,QAA7B,CAAsC,aAAtC,CAAJ,CAA0DJ,KAAK,CAAG,aAAR,CAC1D,GAAIH,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,EAA6BQ,KAA7B,CAAmC,QAAnC,EAA6CC,MAA7C,GAAwD,CAA5D,CAA+DN,KAAK,CAAG,cAAR,CAA/D,IACKA,CAAAA,KAAK,CAAG,SAAWH,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,EAA6BQ,KAA7B,CAAmC,QAAnC,EAA6C,CAA7C,CAAnB,CAELR,OAAO,CAAC,MAAD,CAAP,CAAgB,WAAhB,EAA6BQ,KAA7B,CAAmC,QAAnC,EAEAN,IAAI,CAAGD,kBAAkB,CAAC,CAAD,CAAlB,CAAsBI,IAAtB,CAAP,CACAH,IAAI,CAAGA,IAAI,CAACQ,OAAL,CAAa,KAAb,CAAoBT,kBAAkB,CAAC,CAAD,CAAlB,CAAsBE,KAAtB,CAApB,CAAP,CACAD,IAAI,CAAGA,IAAI,CAACQ,OAAL,CAAa,KAAb,CAAoBN,IAApB,CAAP,CACD,CAED,cAAM,CAAC,6BAA8B,CAErC,MAAOF,CAAAA,IAAP,CACD","sourcesContent":["export default function getHcsLink(profile, location_hierarchy) {\r\n  let link = \"\"\r\n  let store = \"\"\r\n\r\n  try {\r\n    let pkid = profile['meta']['pkid']\r\n    let type = `link_${profile['type'].slice(0, -1)}`\r\n\r\n    if (profile['meta']['hierarchy'].includes(\"Head Office\")) store = \"head_office\"\r\n    if (profile['meta']['hierarchy'].split(\"Store \").length === 1) store = \"london_drugs\"\r\n    else store = \"store_\" + profile['meta']['hierarchy'].split(\"Store \")[1]\r\n\r\n    profile['meta']['hierarchy'].split(\"Store \")\r\n    \r\n    link = location_hierarchy[0][type]\r\n    link = link.replace(\"{1}\", location_hierarchy[1][store])\r\n    link = link.replace(\"{2}\", pkid)\r\n  }\r\n\r\n  catch {/*catch non-existing device*/}\r\n\r\n  return link\r\n}"]},"metadata":{},"sourceType":"module"}