{"ast":null,"code":"import profiles from \"../../data/allstream_profile_list.json\";\nimport validateString from \"./validateString\";\nexport default function getDeviceData() {\n  let searchDevice = [];\n  profiles['devices'].forEach((device, i) => {\n    const data = require(`../../data/phones/${device}.json`);\n\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: validateString(data.resources[0].data.name.toUpperCase())\n    }, {\n      key: i,\n      type: \"product\",\n      data: validateString(data.resources[0].data.product)\n    }, {\n      key: i,\n      type: \"user\",\n      data: validateString(data.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"primary\",\n      data: validateString(data.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"mask\",\n      data: validateString(data.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"ip\",\n      data: validateString(data.resources[0].data.ip_address)\n    }, {\n      key: i,\n      type: \"location\",\n      data: validateString(data.resources[0].meta.hierarchy.split(\"_\").pop())\n    }]);\n  });\n  return searchDevice;\n}\n;","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/LDREACT/src/common/dataRetrieval/getDeviceData.js"],"names":["profiles","validateString","getDeviceData","searchDevice","forEach","device","i","data","require","push","key","type","resources","name","toUpperCase","product","lines","ip_address","meta","hierarchy","split","pop"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,wCAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,MAAIC,YAAY,GAAG,EAAnB;AAEAH,EAAAA,QAAQ,CAAC,SAAD,CAAR,CAAoBI,OAApB,CAA4B,CAACC,MAAD,EAASC,CAAT,KAAe;AACzC,UAAMC,IAAI,GAAGC,OAAO,CAAE,qBAAoBH,MAAO,OAA7B,CAApB;;AAEAF,IAAAA,YAAY,CAACM,IAAb,CAAkB,CAChB;AACEC,MAAAA,GAAG,EAAEJ,CADP;AAEEK,MAAAA,IAAI,EAAE,KAFR;AAGEJ,MAAAA,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBL,IAAlB,CAAuBM,IAAvB,CAA4BC,WAA5B,EAAD;AAHtB,KADgB,EAMhB;AACEJ,MAAAA,GAAG,EAAEJ,CADP;AAEEK,MAAAA,IAAI,EAAE,SAFR;AAGEJ,MAAAA,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBL,IAAlB,CAAuBQ,OAAxB;AAHtB,KANgB,EAWhB;AACEL,MAAAA,GAAG,EAAEJ,CADP;AAEEK,MAAAA,IAAI,EAAE,MAFR;AAGEJ,MAAAA,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBL,IAAlB,CAAuBS,KAAxB;AAHtB,KAXgB,EAgBhB;AACEN,MAAAA,GAAG,EAAEJ,CADP;AAEEK,MAAAA,IAAI,EAAE,SAFR;AAGEJ,MAAAA,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBL,IAAlB,CAAuBS,KAAxB;AAHtB,KAhBgB,EAqBhB;AACEN,MAAAA,GAAG,EAAEJ,CADP;AAEEK,MAAAA,IAAI,EAAE,MAFR;AAGEJ,MAAAA,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBL,IAAlB,CAAuBS,KAAxB;AAHtB,KArBgB,EA0BhB;AACEN,MAAAA,GAAG,EAAEJ,CADP;AAEEK,MAAAA,IAAI,EAAE,IAFR;AAGEJ,MAAAA,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBL,IAAlB,CAAuBU,UAAxB;AAHtB,KA1BgB,EA+BhB;AACEP,MAAAA,GAAG,EAAEJ,CADP;AAEEK,MAAAA,IAAI,EAAE,UAFR;AAGEJ,MAAAA,IAAI,EAAEN,cAAc,CAACM,IAAI,CAACK,SAAL,CAAe,CAAf,EAAkBM,IAAlB,CAAuBC,SAAvB,CAAiCC,KAAjC,CAAuC,GAAvC,EAA4CC,GAA5C,EAAD;AAHtB,KA/BgB,CAAlB;AAqCD,GAxCD;AA0CA,SAAOlB,YAAP;AACD;AAAA","sourcesContent":["import profiles from \"../../data/allstream_profile_list.json\"\r\nimport validateString from \"./validateString\"\r\n\r\nexport default function getDeviceData() {\r\n  let searchDevice = [];\r\n\r\n  profiles['devices'].forEach((device, i) => {\r\n    const data = require(`../../data/phones/${device}.json`);\r\n\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: validateString(data.resources[0].data.name.toUpperCase())\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"product\",\r\n        data: validateString(data.resources[0].data.product)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: validateString(data.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"primary\",\r\n        data: validateString(data.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: validateString(data.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: validateString(data.resources[0].data.ip_address)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: validateString(data.resources[0].meta.hierarchy.split(\"_\").pop())\r\n      }\r\n    ]);\r\n  });\r\n\r\n  return searchDevice;\r\n};"]},"metadata":{},"sourceType":"module"}