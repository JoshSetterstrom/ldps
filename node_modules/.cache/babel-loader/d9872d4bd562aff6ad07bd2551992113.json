{"ast":null,"code":"export default function getDidData(data) {\n  let profileList = [];\n  data['data'].forEach(profile => {\n    profileList.push([{\n      type: \"did\",\n      index: \"DID\",\n      data: (() => {\n        try {\n          let destruct = profile['did'];\n          return destruct ? destruct : \"\";\n        } catch {\n          return \"\";\n        }\n\n        ;\n      })()\n    }, {\n      index: \"Extension\",\n      data: (() => {\n        try {\n          let destruct = profile['line'];\n          return destruct ? destruct : \"\";\n        } catch {\n          return \"\";\n        }\n      })()\n    }, {\n      index: \"Description\",\n      data: (() => {\n        try {\n          let destruct = profile['description'];\n          return destruct ? destruct : \"\";\n        } catch {\n          return \"\";\n        }\n      })()\n    }, {\n      index: \"Area\",\n      data: (() => {\n        try {\n          let destruct = profile['location'];\n          return destruct ? destruct : \"\";\n        } catch {\n          return \"\";\n        }\n      })()\n    }, {\n      index: \"Location\",\n      data: (() => {\n        try {\n          let destruct = profile['area'];\n          return destruct ? destruct : \"\";\n        } catch {\n          return \"\";\n        }\n      })()\n    }]);\n  });\n  return new Promise((resolve, reject) => {\n    resolve(profileList);\n    reject(\"Unable to retrieve devices.\");\n  });\n}","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldps/src/common/api/getDidData.js"],"names":["getDidData","data","profileList","forEach","profile","push","type","index","destruct","Promise","resolve","reject"],"mappings":"AAAA,eAAe,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACvC,MAAIC,WAAW,GAAG,EAAlB;AAEAD,EAAAA,IAAI,CAAC,MAAD,CAAJ,CAAaE,OAAb,CAAqBC,OAAO,IAAI;AAC9BF,IAAAA,WAAW,CAACG,IAAZ,CAAiB,CACf;AACEC,MAAAA,IAAI,EAAE,KADR;AAEEC,MAAAA,KAAK,EAAE,KAFT;AAGEN,MAAAA,IAAI,EAAE,CAAC,MAAM;AACX,YAAI;AACF,cAAIO,QAAQ,GAAGJ,OAAO,CAAC,KAAD,CAAtB;AACA,iBAAOI,QAAQ,GAAGA,QAAH,GAAc,EAA7B;AACD,SAHD,CAIA,MAAM;AAAC,iBAAO,EAAP;AAAU;;AAAA;AAClB,OANK;AAHR,KADe,EAYf;AACED,MAAAA,KAAK,EAAE,WADT;AAEEN,MAAAA,IAAI,EAAE,CAAC,MAAM;AACX,YAAI;AACF,cAAIO,QAAQ,GAAGJ,OAAO,CAAC,MAAD,CAAtB;AACA,iBAAOI,QAAQ,GAAGA,QAAH,GAAc,EAA7B;AACD,SAHD,CAIA,MAAM;AAAC,iBAAO,EAAP;AAAU;AAClB,OANK;AAFR,KAZe,EAsBf;AACED,MAAAA,KAAK,EAAE,aADT;AAEEN,MAAAA,IAAI,EAAE,CAAC,MAAM;AACX,YAAI;AACF,cAAIO,QAAQ,GAAGJ,OAAO,CAAC,aAAD,CAAtB;AACA,iBAAOI,QAAQ,GAAGA,QAAH,GAAc,EAA7B;AACD,SAHD,CAIA,MAAM;AAAC,iBAAO,EAAP;AAAU;AAClB,OANK;AAFR,KAtBe,EAgCf;AACED,MAAAA,KAAK,EAAE,MADT;AAEEN,MAAAA,IAAI,EAAE,CAAC,MAAM;AACX,YAAI;AACF,cAAIO,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAtB;AACA,iBAAOI,QAAQ,GAAGA,QAAH,GAAc,EAA7B;AACD,SAHD,CAIA,MAAM;AAAC,iBAAO,EAAP;AAAU;AAClB,OANK;AAFR,KAhCe,EA0Cf;AACED,MAAAA,KAAK,EAAE,UADT;AAEEN,MAAAA,IAAI,EAAE,CAAC,MAAM;AACX,YAAI;AACF,cAAIO,QAAQ,GAAGJ,OAAO,CAAC,MAAD,CAAtB;AACA,iBAAOI,QAAQ,GAAGA,QAAH,GAAc,EAA7B;AACD,SAHD,CAIA,MAAM;AAAC,iBAAO,EAAP;AAAU;AAClB,OANK;AAFR,KA1Ce,CAAjB;AAqDD,GAtDD;AAwDA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCD,IAAAA,OAAO,CAACR,WAAD,CAAP;AACAS,IAAAA,MAAM,CAAC,6BAAD,CAAN;AACD,GAHM,CAAP;AAID","sourcesContent":["export default function getDidData(data) {\r\n  let profileList = [];\r\n\r\n  data['data'].forEach(profile => {\r\n    profileList.push([\r\n      {\r\n        type: \"did\",\r\n        index: \"DID\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['did'];\r\n            return destruct ? destruct : \"\";\r\n          }\r\n          catch {return \"\"};\r\n        })()\r\n      },\r\n      {\r\n        index: \"Extension\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['line']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Description\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['description']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Area\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['location']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      },\r\n      {\r\n        index: \"Location\",\r\n        data: (() => {\r\n          try {\r\n            let destruct = profile['area']\r\n            return destruct ? destruct : \"\"\r\n          }\r\n          catch {return \"\"}\r\n        })()\r\n      }\r\n    ])\r\n  })\r\n\r\n  return new Promise((resolve, reject) => {\r\n    resolve(profileList)\r\n    reject(\"Unable to retrieve devices.\")\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}