{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josh\\\\Desktop\\\\ld\\\\LDReact\\\\src\\\\common\\\\searchList.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState } from 'react';\nimport * as style from \"../css/searchList\";\nimport { phones } from \"../data/phoneList\";\nimport ListItem from \"./listItem\";\nimport IndexMenu from \"./indexMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet string = \"\";\nlet searchData = [];\nlet relevantSearch = \"mac\";\nlet filteredSearch = [];\nlet infoType = []; //Retrieves and filters data from phone json files and creates an array with relevant information.\n\nconst getPhoneData = () => {\n  let i = 0;\n  let container = [];\n  phones.forEach(phone => {\n    container = require(`../data/phones/${phone}.json`);\n    searchData.push([{\n      key: i,\n      type: \"mac\",\n      data: container.resources[0].data.name.toUpperCase()\n    }, {\n      key: i,\n      type: \"user\",\n      data: container.resources[0].data.lines.line[0].displayAscii\n    }, {\n      key: i,\n      type: \"line\",\n      data: container.resources[0].data.lines.line[0].dirn.pattern\n    }, {\n      key: i,\n      type: \"mask\",\n      data: container.resources[0].data.lines.line[0].e164Mask\n    }, {\n      key: i,\n      type: \"ip\",\n      data: container.resources[0].data.ip_address\n    }, {\n      key: i,\n      type: \"location\",\n      data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\n    }]);\n  });\n  i++; //Replaces undefined and null values with empty string for searchData\n\n  searchData.forEach(e => {\n    if (!e[1].data) e[1].data = \"\";\n  });\n}; //Removes duplicates and returns a list of devices that include any data value corresponding with user input string.\n\n\nconst returnSearch = () => {\n  let unfilteredSearch = [];\n  searchData.forEach(profile => {\n    profile.forEach(e => {\n      if (!e.data) e.data = \"\";\n\n      if (e.data.toLowerCase().includes(string)) {\n        infoType.push(e.type);\n        unfilteredSearch.push(profile);\n      }\n    });\n  });\n  filteredSearch = [...new Set(unfilteredSearch)];\n}; //Returns the most relevant search type and passes it to the IndexMenu prop to change highlighting for index.\n\n\nconst getCount = () => {\n  let counts = [];\n  infoType.forEach(e => {\n    counts[e] = (counts[e] || 0) + 1;\n  });\n  relevantSearch = Object.keys(counts)[0];\n  infoType = [];\n};\n\ngetPhoneData();\nexport default function SearchList() {\n  _s();\n\n  const [device, setDevice] = useState(searchData); //Renders a list with all devices returned to filteredSearch and passed to device state.\n\n  const renderPhoneList = () => {\n    return device.map((item, i) => /*#__PURE__*/_jsxDEV(ListItem, {\n      mac: device[i][0].data,\n      user: device[i][1].data.toLowerCase(),\n      line: device[i][2].data,\n      mask: device[i][3].data,\n      ip: device[i][4].data,\n      location: device[i][5].data.toLowerCase()\n    }, `ID${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => {\n        string = e.target.value;\n        returnSearch();\n        getCount();\n        setDevice(filteredSearch);\n      },\n      type: \"text\",\n      style: style.searchInputStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IndexMenu, {\n      relevantSearch: relevantSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style.listContainerStyle,\n      children: renderPhoneList()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchList, \"qmRvBLPttOlaMj0HnDMWx/sFKtI=\");\n\n_c = SearchList;\n;\n/* <input\r\n          style={style.searchInputStyle}\r\n          onChange={() => {\r\n            console.log(input)\r\n          }}\r\n          onKeyDown={(e) => {\r\n            filterInput(e)\r\n            returnSearch()\r\n            getCount()\r\n            setDevice(filteredSearch)\r\n          }}\r\n        >\r\n        </input> */\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchList\");","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/LDReact/src/common/searchList.jsx"],"names":["React","useState","style","phones","ListItem","IndexMenu","string","searchData","relevantSearch","filteredSearch","infoType","getPhoneData","i","container","forEach","phone","require","push","key","type","data","resources","name","toUpperCase","lines","line","displayAscii","dirn","pattern","e164Mask","ip_address","meta","hierarchy","split","pop","toLowerCase","e","returnSearch","unfilteredSearch","profile","includes","Set","getCount","counts","Object","keys","SearchList","device","setDevice","renderPhoneList","map","item","target","value","searchInputStyle","listContainerStyle"],"mappings":"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","sourcesContent":["import {React, useState} from 'react';\r\nimport * as style from \"../css/searchList\";\r\nimport {phones} from \"../data/phoneList\";\r\nimport ListItem from \"./listItem\";\r\nimport IndexMenu from \"./indexMenu\";\r\n\r\nlet string = \"\";\r\nlet searchData = [];\r\nlet relevantSearch = \"mac\";\r\nlet filteredSearch = [];\r\nlet infoType = [];\r\n\r\n//Retrieves and filters data from phone json files and creates an array with relevant information.\r\nconst getPhoneData = () => {\r\n  let i = 0\r\n  let container = [];\r\n  phones.forEach(phone => {\r\n    container = require(`../data/phones/${phone}.json`)\r\n    searchData.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: container.resources[0].data.name.toUpperCase()\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: container.resources[0].data.lines.line[0].displayAscii\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: container.resources[0].data.lines.line[0].dirn.pattern\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: container.resources[0].data.lines.line[0].e164Mask\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: container.resources[0].data.ip_address\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\r\n      }\r\n    ])\r\n  })\r\n  i++;\r\n  //Replaces undefined and null values with empty string for searchData\r\n  searchData.forEach(e => {if (!e[1].data) e[1].data = \"\"})\r\n};\r\n\r\n//Removes duplicates and returns a list of devices that include any data value corresponding with user input string.\r\nconst returnSearch = () => {\r\n  let unfilteredSearch = []\r\n\r\n  searchData.forEach(profile => {\r\n    profile.forEach(e => {\r\n      if (!e.data) e.data = \"\";\r\n      if (e.data.toLowerCase().includes(string)) {\r\n        infoType.push(e.type)\r\n        unfilteredSearch.push(profile)\r\n      }\r\n    })\r\n  })\r\n  filteredSearch = [...new Set(unfilteredSearch)];\r\n};\r\n\r\n//Returns the most relevant search type and passes it to the IndexMenu prop to change highlighting for index.\r\nconst getCount = () => {\r\n  let counts = [];\r\n  infoType.forEach(e => {\r\n    counts[e] = (counts[e] || 0) + 1;\r\n  });\r\n  relevantSearch = Object.keys(counts)[0];\r\n  infoType = [];\r\n};\r\n\r\n\r\ngetPhoneData()\r\n\r\nexport default function SearchList() {\r\n  const [device, setDevice] = useState(searchData)\r\n\r\n  //Renders a list with all devices returned to filteredSearch and passed to device state.\r\n  const renderPhoneList = () => {\r\n    return device.map((item, i) => (\r\n      <ListItem \r\n        key={`ID${i}`}\r\n        mac={device[i][0].data}\r\n        user={device[i][1].data.toLowerCase()}\r\n        line={device[i][2].data}\r\n        mask={device[i][3].data}\r\n        ip={device[i][4].data}\r\n        location={device[i][5].data.toLowerCase()}\r\n      />\r\n    ))\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input onChange={(e) => {\r\n        string = e.target.value\r\n        returnSearch()\r\n        getCount()\r\n        setDevice(filteredSearch)\r\n      }} \r\n        type=\"text\" style={style.searchInputStyle}/>\r\n      <IndexMenu relevantSearch={relevantSearch}/>\r\n      <div style={style.listContainerStyle}>{renderPhoneList()}</div>\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\n\r\n/* <input\r\n          style={style.searchInputStyle}\r\n          onChange={() => {\r\n            console.log(input)\r\n          }}\r\n          onKeyDown={(e) => {\r\n            filterInput(e)\r\n            returnSearch()\r\n            getCount()\r\n            setDevice(filteredSearch)\r\n          }}\r\n        >\r\n        </input> */"]},"metadata":{},"sourceType":"module"}