{"ast":null,"code":"import phones from \"../data/phone_list\";\nimport lasPhones from \"../data/las_phones\";\n\nconst getDeviceData = () => {\n  let i = 0;\n  let searchDevice = [];\n  phones['phones'].forEach(phone => {\n    const container = require(`../data/phones/${phone}.json`);\n\n    const changeName = container => !container ? \"\" : container;\n\n    const changeUser = container => {\n      if (!container) return \"\";\n      if (!container.line[0]) return \"\";\n      if (!container.line[0].displayAscii) return \"\";\n      return container.line[0].displayAscii;\n    };\n\n    const changeLine = container => {};\n\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: changeName(container.resources[0].data.name.toUpperCase())\n    }, {\n      key: i,\n      type: \"user\",\n      data: changeUser(container.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"line\",\n      data: \"\" // data: changeItem(container.resources[0].data.lines.line[0].dirn.pattern)\n\n    }, {\n      key: i,\n      type: \"mask\",\n      data: \"\" // data: changeItem(container.resources[0].data.lines.line[0].e164Mask)\n\n    }, {\n      key: i,\n      type: \"ip\",\n      data: changeName(container.resources[0].data.ip_address)\n    }, {\n      key: i,\n      type: \"location\",\n      data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\n    }]);\n  });\n  lasPhones['devices'].forEach(device => {\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: device.mac\n    }, {\n      key: i,\n      type: \"user\",\n      data: device.user\n    }, {\n      key: i,\n      type: \"line\",\n      data: device.line\n    }, {\n      key: i,\n      type: \"mask\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"ip\",\n      data: \"\"\n    }, {\n      key: i,\n      type: \"location\",\n      data: \"LAS\"\n    }]);\n  });\n  i++;\n  searchDevice.forEach(e => {\n    if (!e[1].data) e[1].data = \"\";\n  });\n  return searchDevice;\n};\n\nexport default getDeviceData();","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/ldreact/src/common/getDeviceData.js"],"names":["phones","lasPhones","getDeviceData","i","searchDevice","forEach","phone","container","require","changeName","changeUser","line","displayAscii","changeLine","push","key","type","data","resources","name","toUpperCase","lines","ip_address","meta","hierarchy","split","pop","toLowerCase","device","mac","user","e"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,YAAY,GAAG,EAAnB;AAEAJ,EAAAA,MAAM,CAAC,QAAD,CAAN,CAAiBK,OAAjB,CAAyBC,KAAK,IAAI;AAChC,UAAMC,SAAS,GAAGC,OAAO,CAAE,kBAAiBF,KAAM,OAAzB,CAAzB;;AACA,UAAMG,UAAU,GAAGF,SAAS,IAAI,CAACA,SAAD,GAAa,EAAb,GAAkBA,SAAlD;;AAEA,UAAMG,UAAU,GAAIH,SAAD,IAAe;AAChC,UAAI,CAACA,SAAL,EAAgB,OAAO,EAAP;AAChB,UAAI,CAACA,SAAS,CAACI,IAAV,CAAe,CAAf,CAAL,EAAwB,OAAO,EAAP;AACxB,UAAI,CAACJ,SAAS,CAACI,IAAV,CAAe,CAAf,EAAkBC,YAAvB,EAAqC,OAAO,EAAP;AACrC,aAAOL,SAAS,CAACI,IAAV,CAAe,CAAf,EAAkBC,YAAzB;AACD,KALD;;AAOA,UAAMC,UAAU,GAAIN,SAAD,IAAe,CAEjC,CAFD;;AAIAH,IAAAA,YAAY,CAACU,IAAb,CAAkB,CAChB;AACEC,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,IAAI,EAAER,UAAU,CAACF,SAAS,CAACW,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BE,IAA5B,CAAiCC,WAAjC,EAAD;AAHlB,KADgB,EAMhB;AACEL,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAEP,UAAU,CAACH,SAAS,CAACW,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BI,KAA7B;AAHlB,KANgB,EAWhB;AACEN,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE,EAHR,CAIE;;AAJF,KAXgB,EAiBhB;AACEF,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE,EAHR,CAIE;;AAJF,KAjBgB,EAuBhB;AACEF,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAER,UAAU,CAACF,SAAS,CAACW,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BK,UAA7B;AAHlB,KAvBgB,EA4BhB;AACEP,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAEV,SAAS,CAACW,SAAV,CAAoB,CAApB,EAAuBK,IAAvB,CAA4BC,SAA5B,CAAsCC,KAAtC,CAA4C,GAA5C,EAAiDC,GAAjD,GAAuDC,WAAvD;AAHR,KA5BgB,CAAlB;AAkCD,GAjDD;AAmDA1B,EAAAA,SAAS,CAAC,SAAD,CAAT,CAAqBI,OAArB,CAA6BuB,MAAM,IAAI;AACrCxB,IAAAA,YAAY,CAACU,IAAb,CAAkB,CAChB;AACEC,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,IAAI,EAAEW,MAAM,CAACC;AAHf,KADgB,EAMhB;AACEd,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAEW,MAAM,CAACE;AAHf,KANgB,EAWhB;AACEf,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAEW,MAAM,CAACjB;AAHf,KAXgB,EAgBhB;AACEI,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBgB,EAqBhB;AACEF,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBgB,EA0BhB;AACEF,MAAAA,GAAG,EAAEZ,CADP;AAEEa,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BgB,CAAlB;AAgCD,GAjCD;AAmCAd,EAAAA,CAAC;AACDC,EAAAA,YAAY,CAACC,OAAb,CAAqB0B,CAAC,IAAI;AAAC,QAAI,CAACA,CAAC,CAAC,CAAD,CAAD,CAAKd,IAAV,EAAgBc,CAAC,CAAC,CAAD,CAAD,CAAKd,IAAL,GAAY,EAAZ;AAAe,GAA1D;AAEA,SAAOb,YAAP;AACD,CA9FD;;AAgGA,eAAeF,aAAa,EAA5B","sourcesContent":["import phones from \"../data/phone_list\";\r\nimport lasPhones from \"../data/las_phones\";\r\n\r\nconst getDeviceData = () => {\r\n  let i = 0;\r\n  let searchDevice = [];\r\n\r\n  phones['phones'].forEach(phone => {\r\n    const container = require(`../data/phones/${phone}.json`);\r\n    const changeName = container => !container ? \"\" : container\r\n\r\n    const changeUser = (container) => {\r\n      if (!container) return \"\"\r\n      if (!container.line[0]) return \"\"\r\n      if (!container.line[0].displayAscii) return \"\"\r\n      return container.line[0].displayAscii\r\n    }\r\n\r\n    const changeLine = (container) => {\r\n\r\n    }\r\n\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: changeName(container.resources[0].data.name.toUpperCase())\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: changeUser(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: \"\"\r\n        // data: changeItem(container.resources[0].data.lines.line[0].dirn.pattern)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: \"\"\r\n        // data: changeItem(container.resources[0].data.lines.line[0].e164Mask)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: changeName(container.resources[0].data.ip_address)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: container.resources[0].meta.hierarchy.split(\"_\").pop().toLowerCase()\r\n      }\r\n    ]);\r\n  });\r\n\r\n  lasPhones['devices'].forEach(device => {\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: device.mac\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: device.user\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"line\",\r\n        data: device.line\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: \"\"\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: \"LAS\"\r\n      }\r\n    ]);\r\n  });\r\n\r\n  i++;\r\n  searchDevice.forEach(e => {if (!e[1].data) e[1].data = \"\"})\r\n\r\n  return searchDevice;\r\n};\r\n\r\nexport default getDeviceData();"]},"metadata":{},"sourceType":"module"}