{"ast":null,"code":"import axios from 'axios';\nimport getDeviceData from \"./getDeviceData\";\nimport getUserData from \"./getUserData\";\nimport getLineData from \"./getLineData\";\nimport getVoicemailData from \"./getVoicemailData\";\nimport getLasData from './getLasData';\nimport getDidData from './getDidData';\nlet routes = ['phones', 'subscribers', 'lines', 'voicemail', 'did', 'las', 'location_hierarchy', 'profile_changes'];\nexport default async function callApi() {\n  let rawData = {};\n  let cleanData = {};\n  let locationHierarchy = {};\n  let profileChanges = {};\n  let promises = routes.map(route => axios.get(`${process.env.REACT_APP_DEV_URL}${route}`));\n  return await axios.all(promises).then(axios.spread(function () {\n    for (var _len = arguments.length, res = new Array(_len), _key = 0; _key < _len; _key++) {\n      res[_key] = arguments[_key];\n    }\n\n    res.forEach(async data => {\n      let type = data.request.responseURL.split('/').at(-1);\n      rawData[type] = data.data;\n\n      switch (type) {\n        case 'phones':\n          cleanData[type] = getDeviceData(data.data);\n          break;\n\n        case 'subscribers':\n          cleanData[type] = getUserData(data.data);\n          break;\n\n        case 'lines':\n          cleanData[type] = getLineData(data.data);\n          break;\n\n        case 'voicemail':\n          cleanData[type] = getVoicemailData(data.data);\n          break;\n\n        case 'did':\n          cleanData[type] = getDidData(data.data);\n          break;\n\n        case 'las':\n          cleanData[type] = getLasData(data.data);\n          break;\n\n        case 'location_hierarchy':\n          locationHierarchy = data.data;\n          break;\n\n        case 'profile_changes':\n          profileChanges = data.data;\n          break;\n\n        default:\n          break;\n      }\n    });\n  })).then(() => {\n    return new Promise((resolve, reject) => {\n      resolve({\n        \"rawData\": rawData,\n        \"cleanData\": cleanData,\n        \"locationHierarchy\": locationHierarchy,\n        \"profileChanges\": profileChanges\n      });\n    });\n  }).catch(() => {\n    return new Promise((resolve, reject) => {\n      resolve({\n        \"rawData\": {},\n        \"cleanData\": {},\n        \"locationHierarchy\": {},\n        \"profileChanges\": {}\n      });\n    });\n  });\n}\n;","map":{"version":3,"sources":["C:/Users/joshs/Desktop/ld/ldps/src/common/main/api/callApi.js"],"names":["axios","getDeviceData","getUserData","getLineData","getVoicemailData","getLasData","getDidData","routes","callApi","rawData","cleanData","locationHierarchy","profileChanges","promises","map","route","get","process","env","REACT_APP_DEV_URL","all","then","spread","res","forEach","data","type","request","responseURL","split","at","Promise","resolve","reject","catch"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport getDeviceData from \"./getDeviceData\";\r\nimport getUserData from \"./getUserData\";\r\nimport getLineData from \"./getLineData\";\r\nimport getVoicemailData from \"./getVoicemailData\";\r\nimport getLasData from './getLasData';\r\nimport getDidData from './getDidData';\r\n\r\nlet routes = ['phones', 'subscribers', 'lines', 'voicemail', 'did', 'las', 'location_hierarchy', 'profile_changes']\r\n\r\nexport default async function callApi() {\r\n  let rawData = {};\r\n  let cleanData = {};\r\n  let locationHierarchy = {};\r\n  let profileChanges = {};\r\n  let promises = routes.map(route => axios.get(`${process.env.REACT_APP_DEV_URL}${route}`))\r\n\r\n  return await axios.all(promises)\r\n    .then(axios.spread((...res) => {\r\n      res.forEach(async data => {\r\n        let type      = data.request.responseURL.split('/').at(-1)\r\n        rawData[type] = data.data\r\n\r\n        switch(type) {\r\n          case 'phones':             cleanData[type]   = getDeviceData(data.data); break;\r\n          case 'subscribers':        cleanData[type]   = getUserData(data.data); break;\r\n          case 'lines':              cleanData[type]   = getLineData(data.data); break;\r\n          case 'voicemail':          cleanData[type]   = getVoicemailData(data.data); break;\r\n          case 'did':                cleanData[type]   = getDidData(data.data); break;\r\n          case 'las':                cleanData[type]   = getLasData(data.data); break;\r\n          case 'location_hierarchy': locationHierarchy = data.data; break;\r\n          case 'profile_changes':    profileChanges    = data.data; break;\r\n          default:                   break\r\n        }\r\n      });\r\n    }))\r\n    .then(() => {\r\n      return new Promise((resolve, reject) => {\r\n        resolve({\r\n          \"rawData\": rawData,\r\n          \"cleanData\": cleanData, \r\n          \"locationHierarchy\": locationHierarchy,\r\n          \"profileChanges\": profileChanges\r\n        })\r\n      });\r\n    })\r\n    .catch(() => {\r\n      return new Promise((resolve, reject) => {\r\n        resolve({\r\n          \"rawData\": {},\r\n          \"cleanData\": {}, \r\n          \"locationHierarchy\": {},\r\n          \"profileChanges\": {}\r\n        })\r\n      })\r\n    })\r\n};"]},"metadata":{},"sourceType":"module"}