{"ast":null,"code":"import profiles from \"../../data/allstream_profile_list.json\";\nimport validateString from \"./validateString\";\nexport default function getDeviceData() {\n  let searchDevice = [];\n  phones['phones'].forEach(phone => {\n    const container = require(`../../data/phones/${phone}.json`);\n\n    searchDevice.push([{\n      key: i,\n      type: \"mac\",\n      data: validateString(container.resources[0].data.name.toUpperCase())\n    }, {\n      key: i,\n      type: \"product\",\n      data: validateString(container.resources[0].data.product)\n    }, {\n      key: i,\n      type: \"user\",\n      data: validateString(container.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"primary\",\n      data: validateString(container.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"mask\",\n      data: validateString(container.resources[0].data.lines)\n    }, {\n      key: i,\n      type: \"ip\",\n      data: validateString(container.resources[0].data.ip_address)\n    }, {\n      key: i,\n      type: \"location\",\n      data: validateString(container.resources[0].meta.hierarchy.split(\"_\").pop())\n    }]);\n  });\n  return searchDevice;\n}\n;","map":{"version":3,"sources":["C:/Users/Josh/Desktop/ld/LDREACT/src/common/dataRetrieval/getDeviceData.js"],"names":["profiles","validateString","getDeviceData","searchDevice","phones","forEach","phone","container","require","push","key","i","type","data","resources","name","toUpperCase","product","lines","ip_address","meta","hierarchy","split","pop"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,wCAArB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,SAASC,aAAT,GAAyB;AACtC,MAAIC,YAAY,GAAG,EAAnB;AAEAC,EAAAA,MAAM,CAAC,QAAD,CAAN,CAAiBC,OAAjB,CAAyBC,KAAK,IAAI;AAChC,UAAMC,SAAS,GAAGC,OAAO,CAAE,qBAAoBF,KAAM,OAA5B,CAAzB;;AAEAH,IAAAA,YAAY,CAACM,IAAb,CAAkB,CAChB;AACEC,MAAAA,GAAG,EAAEC,CADP;AAEEC,MAAAA,IAAI,EAAE,KAFR;AAGEC,MAAAA,IAAI,EAAEZ,cAAc,CAACM,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BE,IAA5B,CAAiCC,WAAjC,EAAD;AAHtB,KADgB,EAMhB;AACEN,MAAAA,GAAG,EAAEC,CADP;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,IAAI,EAAEZ,cAAc,CAACM,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BI,OAA7B;AAHtB,KANgB,EAWhB;AACEP,MAAAA,GAAG,EAAEC,CADP;AAEEC,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAEZ,cAAc,CAACM,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BK,KAA7B;AAHtB,KAXgB,EAgBhB;AACER,MAAAA,GAAG,EAAEC,CADP;AAEEC,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,IAAI,EAAEZ,cAAc,CAACM,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BK,KAA7B;AAHtB,KAhBgB,EAqBhB;AACER,MAAAA,GAAG,EAAEC,CADP;AAEEC,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAEZ,cAAc,CAACM,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BK,KAA7B;AAHtB,KArBgB,EA0BhB;AACER,MAAAA,GAAG,EAAEC,CADP;AAEEC,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAEZ,cAAc,CAACM,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBD,IAAvB,CAA4BM,UAA7B;AAHtB,KA1BgB,EA+BhB;AACET,MAAAA,GAAG,EAAEC,CADP;AAEEC,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAEZ,cAAc,CAACM,SAAS,CAACO,SAAV,CAAoB,CAApB,EAAuBM,IAAvB,CAA4BC,SAA5B,CAAsCC,KAAtC,CAA4C,GAA5C,EAAiDC,GAAjD,EAAD;AAHtB,KA/BgB,CAAlB;AAqCD,GAxCD;AA0CA,SAAOpB,YAAP;AACD;AAAA","sourcesContent":["import profiles from \"../../data/allstream_profile_list.json\"\r\nimport validateString from \"./validateString\"\r\n\r\nexport default function getDeviceData() {\r\n  let searchDevice = [];\r\n\r\n  phones['phones'].forEach(phone => {\r\n    const container = require(`../../data/phones/${phone}.json`);\r\n\r\n    searchDevice.push([\r\n      {\r\n        key: i,\r\n        type: \"mac\",\r\n        data: validateString(container.resources[0].data.name.toUpperCase())\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"product\",\r\n        data: validateString(container.resources[0].data.product)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"user\",\r\n        data: validateString(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"primary\",\r\n        data: validateString(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"mask\",\r\n        data: validateString(container.resources[0].data.lines)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"ip\",\r\n        data: validateString(container.resources[0].data.ip_address)\r\n      },\r\n      {\r\n        key: i,\r\n        type: \"location\",\r\n        data: validateString(container.resources[0].meta.hierarchy.split(\"_\").pop())\r\n      }\r\n    ]);\r\n  });\r\n\r\n  return searchDevice;\r\n};"]},"metadata":{},"sourceType":"module"}